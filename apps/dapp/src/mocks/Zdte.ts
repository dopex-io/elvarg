/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';

import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';

import type {
  OnEvent,
  PromiseOrValue,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from './common';

export declare namespace Zdte {
  export type DepositInfoStruct = {
    amount: PromiseOrValue<BigNumberish>;
    expiry: PromiseOrValue<BigNumberish>;
  };

  export type DepositInfoStructOutput = [BigNumber, BigNumber] & {
    amount: BigNumber;
    expiry: BigNumber;
  };
}

export interface ZdteInterface extends utils.Interface {
  functions: {
    'EXPIRY_DELAY_TOLERANCE()': FunctionFragment;
    'MARGIN_DECIMALS()': FunctionFragment;
    'MAX_LONG_STRIKE_VOL_ADJUST()': FunctionFragment;
    'MIN_LONG_STRIKE_VOL_ADJUST()': FunctionFragment;
    'STRIKE_DECIMALS()': FunctionFragment;
    'addToContractWhitelist(address)': FunctionFragment;
    'assignKeeperRole(address)': FunctionFragment;
    'base()': FunctionFragment;
    'baseLp()': FunctionFragment;
    'baseLpTokenLiquidty()': FunctionFragment;
    'calcFees(uint256)': FunctionFragment;
    'calcMargin(bool,uint256,uint256)': FunctionFragment;
    'calcOpeningFees(uint256,uint256)': FunctionFragment;
    'calcPnl(uint256)': FunctionFragment;
    'calcPremium(bool,uint256,uint256)': FunctionFragment;
    'calcPremiumWithVol(bool,uint256,uint256,uint256,uint256)': FunctionFragment;
    'canOpenSpreadPosition(bool,uint256,uint256,uint256)': FunctionFragment;
    'claimCollateral(uint256)': FunctionFragment;
    'deposit(bool,uint256)': FunctionFragment;
    'emergencyWithdraw(address[],bool)': FunctionFragment;
    'expireSpreadOptionPosition(uint256)': FunctionFragment;
    'expireSpreads(uint256)': FunctionFragment;
    'expiryInfo(uint256)': FunctionFragment;
    'feeDistributor()': FunctionFragment;
    'feeOpenPosition()': FunctionFragment;
    'genesisExpiry()': FunctionFragment;
    'getCurrentExpiry()': FunctionFragment;
    'getMarkPrice()': FunctionFragment;
    'getPrevExpiry()': FunctionFragment;
    'getUserToBaseDepositInfo(address)': FunctionFragment;
    'getUserToQuoteDepositInfo(address)': FunctionFragment;
    'getVolatility(uint256)': FunctionFragment;
    'getVolatilityWithExpiry(uint256,uint256)': FunctionFragment;
    'isContract(address)': FunctionFragment;
    'keeper()': FunctionFragment;
    'keeperExpirePrevEpochSpreads()': FunctionFragment;
    'keeperRun()': FunctionFragment;
    'keeperSaveSettlementPrice()': FunctionFragment;
    'maxOtmPercentage()': FunctionFragment;
    'optionPricing()': FunctionFragment;
    'oracleId()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'priceOracle()': FunctionFragment;
    'quote()': FunctionFragment;
    'quoteLp()': FunctionFragment;
    'quoteLpTokenLiquidty()': FunctionFragment;
    'removeFromContractWhitelist(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'saveSettlementPrice(uint256,uint256)': FunctionFragment;
    'spreadMarginSafety()': FunctionFragment;
    'spreadOptionPosition(bool,uint256,uint256,uint256)': FunctionFragment;
    'strikeIncrement()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'uniswapV3Router()': FunctionFragment;
    'unpause()': FunctionFragment;
    'updateMarginOfSafety(uint256)': FunctionFragment;
    'updateOracleId(bytes32)': FunctionFragment;
    'userToBaseDepositInfo(address,uint256)': FunctionFragment;
    'userToQuoteDepositInfo(address,uint256)': FunctionFragment;
    'volatilityOracle()': FunctionFragment;
    'whitelistedContracts(address)': FunctionFragment;
    'withdraw(bool,uint256)': FunctionFragment;
    'zdtePositionMinter()': FunctionFragment;
    'zdtePositions(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'EXPIRY_DELAY_TOLERANCE'
      | 'MARGIN_DECIMALS'
      | 'MAX_LONG_STRIKE_VOL_ADJUST'
      | 'MIN_LONG_STRIKE_VOL_ADJUST'
      | 'STRIKE_DECIMALS'
      | 'addToContractWhitelist'
      | 'assignKeeperRole'
      | 'base'
      | 'baseLp'
      | 'baseLpTokenLiquidty'
      | 'calcFees'
      | 'calcMargin'
      | 'calcOpeningFees'
      | 'calcPnl'
      | 'calcPremium'
      | 'calcPremiumWithVol'
      | 'canOpenSpreadPosition'
      | 'claimCollateral'
      | 'deposit'
      | 'emergencyWithdraw'
      | 'expireSpreadOptionPosition'
      | 'expireSpreads'
      | 'expiryInfo'
      | 'feeDistributor'
      | 'feeOpenPosition'
      | 'genesisExpiry'
      | 'getCurrentExpiry'
      | 'getMarkPrice'
      | 'getPrevExpiry'
      | 'getUserToBaseDepositInfo'
      | 'getUserToQuoteDepositInfo'
      | 'getVolatility'
      | 'getVolatilityWithExpiry'
      | 'isContract'
      | 'keeper'
      | 'keeperExpirePrevEpochSpreads'
      | 'keeperRun'
      | 'keeperSaveSettlementPrice'
      | 'maxOtmPercentage'
      | 'optionPricing'
      | 'oracleId'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'priceOracle'
      | 'quote'
      | 'quoteLp'
      | 'quoteLpTokenLiquidty'
      | 'removeFromContractWhitelist'
      | 'renounceOwnership'
      | 'saveSettlementPrice'
      | 'spreadMarginSafety'
      | 'spreadOptionPosition'
      | 'strikeIncrement'
      | 'transferOwnership'
      | 'uniswapV3Router'
      | 'unpause'
      | 'updateMarginOfSafety'
      | 'updateOracleId'
      | 'userToBaseDepositInfo'
      | 'userToQuoteDepositInfo'
      | 'volatilityOracle'
      | 'whitelistedContracts'
      | 'withdraw'
      | 'zdtePositionMinter'
      | 'zdtePositions'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'EXPIRY_DELAY_TOLERANCE',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'MARGIN_DECIMALS',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'MAX_LONG_STRIKE_VOL_ADJUST',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'MIN_LONG_STRIKE_VOL_ADJUST',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'STRIKE_DECIMALS',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'addToContractWhitelist',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'assignKeeperRole',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'base', values?: undefined): string;
  encodeFunctionData(functionFragment: 'baseLp', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'baseLpTokenLiquidty',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'calcFees',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'calcMargin',
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'calcOpeningFees',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'calcPnl',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'calcPremium',
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'calcPremiumWithVol',
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'canOpenSpreadPosition',
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'claimCollateral',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [PromiseOrValue<boolean>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'emergencyWithdraw',
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'expireSpreadOptionPosition',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'expireSpreads',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'expiryInfo',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'feeDistributor',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'feeOpenPosition',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'genesisExpiry',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getCurrentExpiry',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getMarkPrice',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getPrevExpiry',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserToBaseDepositInfo',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserToQuoteDepositInfo',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getVolatility',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getVolatilityWithExpiry',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'isContract',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'keeper', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'keeperExpirePrevEpochSpreads',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'keeperRun', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'keeperSaveSettlementPrice',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'maxOtmPercentage',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'optionPricing',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'oracleId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'priceOracle',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'quote', values?: undefined): string;
  encodeFunctionData(functionFragment: 'quoteLp', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'quoteLpTokenLiquidty',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'removeFromContractWhitelist',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'saveSettlementPrice',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'spreadMarginSafety',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'spreadOptionPosition',
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'strikeIncrement',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'uniswapV3Router',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'updateMarginOfSafety',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateOracleId',
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: 'userToBaseDepositInfo',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'userToQuoteDepositInfo',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'volatilityOracle',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'whitelistedContracts',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<boolean>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'zdtePositionMinter',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'zdtePositions',
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: 'EXPIRY_DELAY_TOLERANCE',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MARGIN_DECIMALS',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MAX_LONG_STRIKE_VOL_ADJUST',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MIN_LONG_STRIKE_VOL_ADJUST',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'STRIKE_DECIMALS',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'addToContractWhitelist',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'assignKeeperRole',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'base', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseLp', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'baseLpTokenLiquidty',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'calcFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'calcMargin', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'calcOpeningFees',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'calcPnl', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'calcPremium',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calcPremiumWithVol',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'canOpenSpreadPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'claimCollateral',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'emergencyWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'expireSpreadOptionPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'expireSpreads',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'expiryInfo', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'feeDistributor',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'feeOpenPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'genesisExpiry',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCurrentExpiry',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getMarkPrice',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPrevExpiry',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserToBaseDepositInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserToQuoteDepositInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getVolatility',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getVolatilityWithExpiry',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'isContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'keeper', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'keeperExpirePrevEpochSpreads',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'keeperRun', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'keeperSaveSettlementPrice',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'maxOtmPercentage',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'optionPricing',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'oracleId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'priceOracle',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'quote', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'quoteLp', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'quoteLpTokenLiquidty',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeFromContractWhitelist',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'saveSettlementPrice',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'spreadMarginSafety',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'spreadOptionPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'strikeIncrement',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'uniswapV3Router',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'updateMarginOfSafety',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateOracleId',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userToBaseDepositInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userToQuoteDepositInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'volatilityOracle',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'whitelistedContracts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'zdtePositionMinter',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'zdtePositions',
    data: BytesLike
  ): Result;

  events: {
    'AddToContractWhitelist(address)': EventFragment;
    'Deposit(bool,uint256,address)': EventFragment;
    'KeeperAssigned(address)': EventFragment;
    'KeeperExpireSpreads(uint256,address)': EventFragment;
    'KeeperRan(uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'RemoveFromContractWhitelist(address)': EventFragment;
    'SettlementPriceSaved(uint256,uint256)': EventFragment;
    'SpreadOptionPosition(uint256,uint256,uint256,uint256,address)': EventFragment;
    'SpreadOptionPositionExpired(uint256,uint256,address)': EventFragment;
    'Unpaused(address)': EventFragment;
    'Withdraw(bool,uint256,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddToContractWhitelist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KeeperAssigned'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KeeperExpireSpreads'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'KeeperRan'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'RemoveFromContractWhitelist'
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SettlementPriceSaved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SpreadOptionPosition'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'SpreadOptionPositionExpired'
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface AddToContractWhitelistEventObject {
  _contract: string;
}
export type AddToContractWhitelistEvent = TypedEvent<
  [string],
  AddToContractWhitelistEventObject
>;

export type AddToContractWhitelistEventFilter =
  TypedEventFilter<AddToContractWhitelistEvent>;

export interface DepositEventObject {
  isQuote: boolean;
  amount: BigNumber;
  sender: string;
}
export type DepositEvent = TypedEvent<
  [boolean, BigNumber, string],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface KeeperAssignedEventObject {
  keeper: string;
}
export type KeeperAssignedEvent = TypedEvent<
  [string],
  KeeperAssignedEventObject
>;

export type KeeperAssignedEventFilter = TypedEventFilter<KeeperAssignedEvent>;

export interface KeeperExpireSpreadsEventObject {
  expiry: BigNumber;
  user: string;
}
export type KeeperExpireSpreadsEvent = TypedEvent<
  [BigNumber, string],
  KeeperExpireSpreadsEventObject
>;

export type KeeperExpireSpreadsEventFilter =
  TypedEventFilter<KeeperExpireSpreadsEvent>;

export interface KeeperRanEventObject {
  jobDoneTime: BigNumber;
}
export type KeeperRanEvent = TypedEvent<[BigNumber], KeeperRanEventObject>;

export type KeeperRanEventFilter = TypedEventFilter<KeeperRanEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RemoveFromContractWhitelistEventObject {
  _contract: string;
}
export type RemoveFromContractWhitelistEvent = TypedEvent<
  [string],
  RemoveFromContractWhitelistEventObject
>;

export type RemoveFromContractWhitelistEventFilter =
  TypedEventFilter<RemoveFromContractWhitelistEvent>;

export interface SettlementPriceSavedEventObject {
  expiry: BigNumber;
  settlementPrice: BigNumber;
}
export type SettlementPriceSavedEvent = TypedEvent<
  [BigNumber, BigNumber],
  SettlementPriceSavedEventObject
>;

export type SettlementPriceSavedEventFilter =
  TypedEventFilter<SettlementPriceSavedEvent>;

export interface SpreadOptionPositionEventObject {
  id: BigNumber;
  amount: BigNumber;
  longStrike: BigNumber;
  shortStrike: BigNumber;
  user: string;
}
export type SpreadOptionPositionEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string],
  SpreadOptionPositionEventObject
>;

export type SpreadOptionPositionEventFilter =
  TypedEventFilter<SpreadOptionPositionEvent>;

export interface SpreadOptionPositionExpiredEventObject {
  id: BigNumber;
  pnl: BigNumber;
  user: string;
}
export type SpreadOptionPositionExpiredEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  SpreadOptionPositionExpiredEventObject
>;

export type SpreadOptionPositionExpiredEventFilter =
  TypedEventFilter<SpreadOptionPositionExpiredEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawEventObject {
  isQuote: boolean;
  amount: BigNumber;
  sender: string;
}
export type WithdrawEvent = TypedEvent<
  [boolean, BigNumber, string],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Zdte extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZdteInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EXPIRY_DELAY_TOLERANCE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MARGIN_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_LONG_STRIKE_VOL_ADJUST(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_LONG_STRIKE_VOL_ADJUST(overrides?: CallOverrides): Promise<[BigNumber]>;

    STRIKE_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    addToContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assignKeeperRole(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    base(overrides?: CallOverrides): Promise<[string]>;

    baseLp(overrides?: CallOverrides): Promise<[string]>;

    baseLpTokenLiquidty(overrides?: CallOverrides): Promise<[BigNumber]>;

    calcFees(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fees: BigNumber }>;

    calcMargin(
      isPut: PromiseOrValue<boolean>,
      longStrike: PromiseOrValue<BigNumberish>,
      shortStrike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { margin: BigNumber }>;

    calcOpeningFees(
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { premium: BigNumber }>;

    calcPnl(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pnl: BigNumber }>;

    calcPremium(
      isPut: PromiseOrValue<boolean>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { premium: BigNumber }>;

    calcPremiumWithVol(
      isPut: PromiseOrValue<boolean>,
      markPrice: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      volatility: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { premium: BigNumber }>;

    canOpenSpreadPosition(
      isPut: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      longStrike: PromiseOrValue<BigNumberish>,
      shortStrike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimCollateral(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      isQuote: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      tokens: PromiseOrValue<string>[],
      transferNative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    expireSpreadOptionPosition(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    expireSpreads(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    expiryInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        begin: boolean;
        expired: boolean;
        expiry: BigNumber;
        startId: BigNumber;
        count: BigNumber;
        settlementPrice: BigNumber;
      }
    >;

    feeDistributor(overrides?: CallOverrides): Promise<[string]>;

    feeOpenPosition(overrides?: CallOverrides): Promise<[BigNumber]>;

    genesisExpiry(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentExpiry(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { expiry: BigNumber }>;

    getMarkPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    getPrevExpiry(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { expiry: BigNumber }>;

    getUserToBaseDepositInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Zdte.DepositInfoStructOutput[]]>;

    getUserToQuoteDepositInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Zdte.DepositInfoStructOutput[]]>;

    getVolatility(
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { volatility: BigNumber }>;

    getVolatilityWithExpiry(
      strike: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { volatility: BigNumber }>;

    isContract(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    keeperExpirePrevEpochSpreads(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    keeperRun(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    keeperSaveSettlementPrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxOtmPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    optionPricing(overrides?: CallOverrides): Promise<[string]>;

    oracleId(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    quote(overrides?: CallOverrides): Promise<[string]>;

    quoteLp(overrides?: CallOverrides): Promise<[string]>;

    quoteLpTokenLiquidty(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeFromContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    saveSettlementPrice(
      expiry: PromiseOrValue<BigNumberish>,
      settlementPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spreadMarginSafety(overrides?: CallOverrides): Promise<[BigNumber]>;

    spreadOptionPosition(
      isPut: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      longStrike: PromiseOrValue<BigNumberish>,
      shortStrike: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    strikeIncrement(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapV3Router(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMarginOfSafety(
      _spreadMarginSafety: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateOracleId(
      _oracleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userToBaseDepositInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; expiry: BigNumber }
    >;

    userToQuoteDepositInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; expiry: BigNumber }
    >;

    volatilityOracle(overrides?: CallOverrides): Promise<[string]>;

    whitelistedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdraw(
      isQuote: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    zdtePositionMinter(overrides?: CallOverrides): Promise<[string]>;

    zdtePositions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isOpen: boolean;
        isPut: boolean;
        isSpread: boolean;
        positions: BigNumber;
        longStrike: BigNumber;
        shortStrike: BigNumber;
        longPremium: BigNumber;
        shortPremium: BigNumber;
        fees: BigNumber;
        pnl: BigNumber;
        openedAt: BigNumber;
        expiry: BigNumber;
        margin: BigNumber;
      }
    >;
  };

  EXPIRY_DELAY_TOLERANCE(overrides?: CallOverrides): Promise<BigNumber>;

  MARGIN_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_LONG_STRIKE_VOL_ADJUST(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_LONG_STRIKE_VOL_ADJUST(overrides?: CallOverrides): Promise<BigNumber>;

  STRIKE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  addToContractWhitelist(
    _contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assignKeeperRole(
    _keeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  base(overrides?: CallOverrides): Promise<string>;

  baseLp(overrides?: CallOverrides): Promise<string>;

  baseLpTokenLiquidty(overrides?: CallOverrides): Promise<BigNumber>;

  calcFees(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcMargin(
    isPut: PromiseOrValue<boolean>,
    longStrike: PromiseOrValue<BigNumberish>,
    shortStrike: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcOpeningFees(
    strike: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcPnl(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcPremium(
    isPut: PromiseOrValue<boolean>,
    strike: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcPremiumWithVol(
    isPut: PromiseOrValue<boolean>,
    markPrice: PromiseOrValue<BigNumberish>,
    strike: PromiseOrValue<BigNumberish>,
    volatility: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canOpenSpreadPosition(
    isPut: PromiseOrValue<boolean>,
    amount: PromiseOrValue<BigNumberish>,
    longStrike: PromiseOrValue<BigNumberish>,
    shortStrike: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimCollateral(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    isQuote: PromiseOrValue<boolean>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    tokens: PromiseOrValue<string>[],
    transferNative: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  expireSpreadOptionPosition(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  expireSpreads(
    expiry: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  expiryInfo(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
      begin: boolean;
      expired: boolean;
      expiry: BigNumber;
      startId: BigNumber;
      count: BigNumber;
      settlementPrice: BigNumber;
    }
  >;

  feeDistributor(overrides?: CallOverrides): Promise<string>;

  feeOpenPosition(overrides?: CallOverrides): Promise<BigNumber>;

  genesisExpiry(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentExpiry(overrides?: CallOverrides): Promise<BigNumber>;

  getMarkPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getPrevExpiry(overrides?: CallOverrides): Promise<BigNumber>;

  getUserToBaseDepositInfo(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Zdte.DepositInfoStructOutput[]>;

  getUserToQuoteDepositInfo(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Zdte.DepositInfoStructOutput[]>;

  getVolatility(
    strike: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVolatilityWithExpiry(
    strike: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isContract(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  keeper(overrides?: CallOverrides): Promise<string>;

  keeperExpirePrevEpochSpreads(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  keeperRun(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  keeperSaveSettlementPrice(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxOtmPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  optionPricing(overrides?: CallOverrides): Promise<string>;

  oracleId(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  quote(overrides?: CallOverrides): Promise<string>;

  quoteLp(overrides?: CallOverrides): Promise<string>;

  quoteLpTokenLiquidty(overrides?: CallOverrides): Promise<BigNumber>;

  removeFromContractWhitelist(
    _contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  saveSettlementPrice(
    expiry: PromiseOrValue<BigNumberish>,
    settlementPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spreadMarginSafety(overrides?: CallOverrides): Promise<BigNumber>;

  spreadOptionPosition(
    isPut: PromiseOrValue<boolean>,
    amount: PromiseOrValue<BigNumberish>,
    longStrike: PromiseOrValue<BigNumberish>,
    shortStrike: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  strikeIncrement(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapV3Router(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMarginOfSafety(
    _spreadMarginSafety: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateOracleId(
    _oracleId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userToBaseDepositInfo(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; expiry: BigNumber }>;

  userToQuoteDepositInfo(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; expiry: BigNumber }>;

  volatilityOracle(overrides?: CallOverrides): Promise<string>;

  whitelistedContracts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    isQuote: PromiseOrValue<boolean>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  zdtePositionMinter(overrides?: CallOverrides): Promise<string>;

  zdtePositions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      isOpen: boolean;
      isPut: boolean;
      isSpread: boolean;
      positions: BigNumber;
      longStrike: BigNumber;
      shortStrike: BigNumber;
      longPremium: BigNumber;
      shortPremium: BigNumber;
      fees: BigNumber;
      pnl: BigNumber;
      openedAt: BigNumber;
      expiry: BigNumber;
      margin: BigNumber;
    }
  >;

  callStatic: {
    EXPIRY_DELAY_TOLERANCE(overrides?: CallOverrides): Promise<BigNumber>;

    MARGIN_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LONG_STRIKE_VOL_ADJUST(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LONG_STRIKE_VOL_ADJUST(overrides?: CallOverrides): Promise<BigNumber>;

    STRIKE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    addToContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    assignKeeperRole(
      _keeper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    base(overrides?: CallOverrides): Promise<string>;

    baseLp(overrides?: CallOverrides): Promise<string>;

    baseLpTokenLiquidty(overrides?: CallOverrides): Promise<BigNumber>;

    calcFees(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcMargin(
      isPut: PromiseOrValue<boolean>,
      longStrike: PromiseOrValue<BigNumberish>,
      shortStrike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOpeningFees(
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPnl(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPremium(
      isPut: PromiseOrValue<boolean>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPremiumWithVol(
      isPut: PromiseOrValue<boolean>,
      markPrice: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      volatility: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canOpenSpreadPosition(
      isPut: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      longStrike: PromiseOrValue<BigNumberish>,
      shortStrike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimCollateral(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      isQuote: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      tokens: PromiseOrValue<string>[],
      transferNative: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    expireSpreadOptionPosition(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    expireSpreads(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    expiryInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        begin: boolean;
        expired: boolean;
        expiry: BigNumber;
        startId: BigNumber;
        count: BigNumber;
        settlementPrice: BigNumber;
      }
    >;

    feeDistributor(overrides?: CallOverrides): Promise<string>;

    feeOpenPosition(overrides?: CallOverrides): Promise<BigNumber>;

    genesisExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    getMarkPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getPrevExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    getUserToBaseDepositInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Zdte.DepositInfoStructOutput[]>;

    getUserToQuoteDepositInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Zdte.DepositInfoStructOutput[]>;

    getVolatility(
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVolatilityWithExpiry(
      strike: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isContract(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    keeper(overrides?: CallOverrides): Promise<string>;

    keeperExpirePrevEpochSpreads(overrides?: CallOverrides): Promise<boolean>;

    keeperRun(overrides?: CallOverrides): Promise<boolean>;

    keeperSaveSettlementPrice(overrides?: CallOverrides): Promise<boolean>;

    maxOtmPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    optionPricing(overrides?: CallOverrides): Promise<string>;

    oracleId(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    quote(overrides?: CallOverrides): Promise<string>;

    quoteLp(overrides?: CallOverrides): Promise<string>;

    quoteLpTokenLiquidty(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    saveSettlementPrice(
      expiry: PromiseOrValue<BigNumberish>,
      settlementPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    spreadMarginSafety(overrides?: CallOverrides): Promise<BigNumber>;

    spreadOptionPosition(
      isPut: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      longStrike: PromiseOrValue<BigNumberish>,
      shortStrike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strikeIncrement(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3Router(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateMarginOfSafety(
      _spreadMarginSafety: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOracleId(
      _oracleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    userToBaseDepositInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; expiry: BigNumber }
    >;

    userToQuoteDepositInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; expiry: BigNumber }
    >;

    volatilityOracle(overrides?: CallOverrides): Promise<string>;

    whitelistedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      isQuote: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    zdtePositionMinter(overrides?: CallOverrides): Promise<string>;

    zdtePositions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isOpen: boolean;
        isPut: boolean;
        isSpread: boolean;
        positions: BigNumber;
        longStrike: BigNumber;
        shortStrike: BigNumber;
        longPremium: BigNumber;
        shortPremium: BigNumber;
        fees: BigNumber;
        pnl: BigNumber;
        openedAt: BigNumber;
        expiry: BigNumber;
        margin: BigNumber;
      }
    >;
  };

  filters: {
    'AddToContractWhitelist(address)'(
      _contract?: PromiseOrValue<string> | null
    ): AddToContractWhitelistEventFilter;
    AddToContractWhitelist(
      _contract?: PromiseOrValue<string> | null
    ): AddToContractWhitelistEventFilter;

    'Deposit(bool,uint256,address)'(
      isQuote?: null,
      amount?: null,
      sender?: PromiseOrValue<string> | null
    ): DepositEventFilter;
    Deposit(
      isQuote?: null,
      amount?: null,
      sender?: PromiseOrValue<string> | null
    ): DepositEventFilter;

    'KeeperAssigned(address)'(keeper?: null): KeeperAssignedEventFilter;
    KeeperAssigned(keeper?: null): KeeperAssignedEventFilter;

    'KeeperExpireSpreads(uint256,address)'(
      expiry?: null,
      user?: PromiseOrValue<string> | null
    ): KeeperExpireSpreadsEventFilter;
    KeeperExpireSpreads(
      expiry?: null,
      user?: PromiseOrValue<string> | null
    ): KeeperExpireSpreadsEventFilter;

    'KeeperRan(uint256)'(jobDoneTime?: null): KeeperRanEventFilter;
    KeeperRan(jobDoneTime?: null): KeeperRanEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'RemoveFromContractWhitelist(address)'(
      _contract?: PromiseOrValue<string> | null
    ): RemoveFromContractWhitelistEventFilter;
    RemoveFromContractWhitelist(
      _contract?: PromiseOrValue<string> | null
    ): RemoveFromContractWhitelistEventFilter;

    'SettlementPriceSaved(uint256,uint256)'(
      expiry?: null,
      settlementPrice?: null
    ): SettlementPriceSavedEventFilter;
    SettlementPriceSaved(
      expiry?: null,
      settlementPrice?: null
    ): SettlementPriceSavedEventFilter;

    'SpreadOptionPosition(uint256,uint256,uint256,uint256,address)'(
      id?: null,
      amount?: null,
      longStrike?: null,
      shortStrike?: null,
      user?: PromiseOrValue<string> | null
    ): SpreadOptionPositionEventFilter;
    SpreadOptionPosition(
      id?: null,
      amount?: null,
      longStrike?: null,
      shortStrike?: null,
      user?: PromiseOrValue<string> | null
    ): SpreadOptionPositionEventFilter;

    'SpreadOptionPositionExpired(uint256,uint256,address)'(
      id?: null,
      pnl?: null,
      user?: PromiseOrValue<string> | null
    ): SpreadOptionPositionExpiredEventFilter;
    SpreadOptionPositionExpired(
      id?: null,
      pnl?: null,
      user?: PromiseOrValue<string> | null
    ): SpreadOptionPositionExpiredEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'Withdraw(bool,uint256,address)'(
      isQuote?: null,
      amount?: null,
      sender?: PromiseOrValue<string> | null
    ): WithdrawEventFilter;
    Withdraw(
      isQuote?: null,
      amount?: null,
      sender?: PromiseOrValue<string> | null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    EXPIRY_DELAY_TOLERANCE(overrides?: CallOverrides): Promise<BigNumber>;

    MARGIN_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_LONG_STRIKE_VOL_ADJUST(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LONG_STRIKE_VOL_ADJUST(overrides?: CallOverrides): Promise<BigNumber>;

    STRIKE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    addToContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assignKeeperRole(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    base(overrides?: CallOverrides): Promise<BigNumber>;

    baseLp(overrides?: CallOverrides): Promise<BigNumber>;

    baseLpTokenLiquidty(overrides?: CallOverrides): Promise<BigNumber>;

    calcFees(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcMargin(
      isPut: PromiseOrValue<boolean>,
      longStrike: PromiseOrValue<BigNumberish>,
      shortStrike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOpeningFees(
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPnl(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPremium(
      isPut: PromiseOrValue<boolean>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPremiumWithVol(
      isPut: PromiseOrValue<boolean>,
      markPrice: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      volatility: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canOpenSpreadPosition(
      isPut: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      longStrike: PromiseOrValue<BigNumberish>,
      shortStrike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimCollateral(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      isQuote: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      tokens: PromiseOrValue<string>[],
      transferNative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    expireSpreadOptionPosition(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    expireSpreads(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    expiryInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    feeOpenPosition(overrides?: CallOverrides): Promise<BigNumber>;

    genesisExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    getMarkPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getPrevExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    getUserToBaseDepositInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserToQuoteDepositInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVolatility(
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVolatilityWithExpiry(
      strike: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isContract(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    keeperExpirePrevEpochSpreads(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    keeperRun(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    keeperSaveSettlementPrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxOtmPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    optionPricing(overrides?: CallOverrides): Promise<BigNumber>;

    oracleId(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    quote(overrides?: CallOverrides): Promise<BigNumber>;

    quoteLp(overrides?: CallOverrides): Promise<BigNumber>;

    quoteLpTokenLiquidty(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    saveSettlementPrice(
      expiry: PromiseOrValue<BigNumberish>,
      settlementPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spreadMarginSafety(overrides?: CallOverrides): Promise<BigNumber>;

    spreadOptionPosition(
      isPut: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      longStrike: PromiseOrValue<BigNumberish>,
      shortStrike: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    strikeIncrement(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapV3Router(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMarginOfSafety(
      _spreadMarginSafety: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateOracleId(
      _oracleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userToBaseDepositInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userToQuoteDepositInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    volatilityOracle(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      isQuote: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    zdtePositionMinter(overrides?: CallOverrides): Promise<BigNumber>;

    zdtePositions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EXPIRY_DELAY_TOLERANCE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MARGIN_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_LONG_STRIKE_VOL_ADJUST(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_LONG_STRIKE_VOL_ADJUST(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    STRIKE_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addToContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assignKeeperRole(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    base(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseLp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseLpTokenLiquidty(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcFees(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcMargin(
      isPut: PromiseOrValue<boolean>,
      longStrike: PromiseOrValue<BigNumberish>,
      shortStrike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcOpeningFees(
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcPnl(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcPremium(
      isPut: PromiseOrValue<boolean>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcPremiumWithVol(
      isPut: PromiseOrValue<boolean>,
      markPrice: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      volatility: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canOpenSpreadPosition(
      isPut: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      longStrike: PromiseOrValue<BigNumberish>,
      shortStrike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimCollateral(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      isQuote: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      tokens: PromiseOrValue<string>[],
      transferNative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    expireSpreadOptionPosition(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    expireSpreads(
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    expiryInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeOpenPosition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    genesisExpiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentExpiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarkPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrevExpiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserToBaseDepositInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserToQuoteDepositInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVolatility(
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVolatilityWithExpiry(
      strike: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isContract(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keeperExpirePrevEpochSpreads(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    keeperRun(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    keeperSaveSettlementPrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxOtmPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optionPricing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quote(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteLp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteLpTokenLiquidty(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFromContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    saveSettlementPrice(
      expiry: PromiseOrValue<BigNumberish>,
      settlementPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spreadMarginSafety(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spreadOptionPosition(
      isPut: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      longStrike: PromiseOrValue<BigNumberish>,
      shortStrike: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    strikeIncrement(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMarginOfSafety(
      _spreadMarginSafety: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateOracleId(
      _oracleId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userToBaseDepositInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userToQuoteDepositInfo(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    volatilityOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      isQuote: PromiseOrValue<boolean>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    zdtePositionMinter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zdtePositions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
