/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export declare namespace IStraddleLp {
  export type AddressesStruct = {
    usd: PromiseOrValue<string>;
    straddle: PromiseOrValue<string>;
    underlying: PromiseOrValue<string>;
    optionPricing: PromiseOrValue<string>;
    assetSwapper: PromiseOrValue<string>;
  };

  export type AddressesStructOutput = [
    string,
    string,
    string,
    string,
    string
  ] & {
    usd: string;
    straddle: string;
    underlying: string;
    optionPricing: string;
    assetSwapper: string;
  };

  export type LpPositionStruct = {
    lpId: PromiseOrValue<BigNumberish>;
    epoch: PromiseOrValue<BigNumberish>;
    strike: PromiseOrValue<BigNumberish>;
    usdLiquidity: PromiseOrValue<BigNumberish>;
    usdLiquidityUsed: PromiseOrValue<BigNumberish>;
    markup: PromiseOrValue<BigNumberish>;
    purchased: PromiseOrValue<BigNumberish>;
    seller: PromiseOrValue<string>;
    killed: PromiseOrValue<boolean>;
  };

  export type LpPositionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    boolean
  ] & {
    lpId: BigNumber;
    epoch: BigNumber;
    strike: BigNumber;
    usdLiquidity: BigNumber;
    usdLiquidityUsed: BigNumber;
    markup: BigNumber;
    purchased: BigNumber;
    seller: string;
    killed: boolean;
  };

  export type PurchaseReceiptStruct = {
    receiptId: PromiseOrValue<BigNumberish>;
    epoch: PromiseOrValue<BigNumberish>;
    strike: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    buyer: PromiseOrValue<string>;
    settled: PromiseOrValue<boolean>;
  };

  export type PurchaseReceiptStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    boolean
  ] & {
    receiptId: BigNumber;
    epoch: BigNumber;
    strike: BigNumber;
    amount: BigNumber;
    buyer: string;
    settled: boolean;
  };

  export type LiquidityStruct = {
    write: PromiseOrValue<BigNumberish>;
    purchase: PromiseOrValue<BigNumberish>;
  };

  export type LiquidityStructOutput = [BigNumber, BigNumber] & {
    write: BigNumber;
    purchase: BigNumber;
  };
}

export interface StraddleLpInterface extends utils.Interface {
  functions: {
    'addToContractWhitelist(address)': FunctionFragment;
    'addToLp(uint256,uint256,uint256,address,bool)': FunctionFragment;
    'addresses()': FunctionFragment;
    'calculatePremium(uint256,uint256,uint256)': FunctionFragment;
    'calculatePutOptionPnl(uint256,uint256,uint256)': FunctionFragment;
    'emergencyWithdrawn(address[],bool)': FunctionFragment;
    'fillLpPosition(uint256,uint256,uint256,bool)': FunctionFragment;
    'getAllLpPositions(uint256)': FunctionFragment;
    'getAllPurchasePositions(uint256)': FunctionFragment;
    'getEpochStrikeLiquidity(uint256,uint256)': FunctionFragment;
    'getEpochStrikes(uint256)': FunctionFragment;
    'getPremiumInUnderlying(uint256)': FunctionFragment;
    'getStraddle()': FunctionFragment;
    'getStraddleAssetPrice()': FunctionFragment;
    'getStraddleEpoch()': FunctionFragment;
    'getStraddleExpiries()': FunctionFragment;
    'getStraddleExpiry()': FunctionFragment;
    'getStraddleSettlementPrice(uint256)': FunctionFragment;
    'getStraddleVolatility(uint256)': FunctionFragment;
    'getUserLpPositions(uint256,address)': FunctionFragment;
    'getUserPurchasePositions(uint256,address)': FunctionFragment;
    'hasEpochExpired(uint256)': FunctionFragment;
    'isContract(address)': FunctionFragment;
    'killLpPosition(uint256,uint256)': FunctionFragment;
    'multiAddToLp(uint256[],uint256[],uint256[],address,bool)': FunctionFragment;
    'multiFillLpPosition(uint256[],uint256[],uint256[],bool)': FunctionFragment;
    'multiKillLpPosition(uint256[],uint256[])': FunctionFragment;
    'multiSettle(uint256[],uint256[])': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'removeFromContractWhitelist(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setAddresses((address,address,address,address,address))': FunctionFragment;
    'settle(uint256,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'updateStraddleExpiry()': FunctionFragment;
    'whitelistedContracts(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addToContractWhitelist'
      | 'addToLp'
      | 'addresses'
      | 'calculatePremium'
      | 'calculatePutOptionPnl'
      | 'emergencyWithdrawn'
      | 'fillLpPosition'
      | 'getAllLpPositions'
      | 'getAllPurchasePositions'
      | 'getEpochStrikeLiquidity'
      | 'getEpochStrikes'
      | 'getPremiumInUnderlying'
      | 'getStraddle'
      | 'getStraddleAssetPrice'
      | 'getStraddleEpoch'
      | 'getStraddleExpiries'
      | 'getStraddleExpiry'
      | 'getStraddleSettlementPrice'
      | 'getStraddleVolatility'
      | 'getUserLpPositions'
      | 'getUserPurchasePositions'
      | 'hasEpochExpired'
      | 'isContract'
      | 'killLpPosition'
      | 'multiAddToLp'
      | 'multiFillLpPosition'
      | 'multiKillLpPosition'
      | 'multiSettle'
      | 'name'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'removeFromContractWhitelist'
      | 'renounceOwnership'
      | 'setAddresses'
      | 'settle'
      | 'transferOwnership'
      | 'unpause'
      | 'updateStraddleExpiry'
      | 'whitelistedContracts'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addToContractWhitelist',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'addToLp',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: 'addresses', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'calculatePremium',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'calculatePutOptionPnl',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'emergencyWithdrawn',
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'fillLpPosition',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAllLpPositions',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAllPurchasePositions',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getEpochStrikeLiquidity',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getEpochStrikes',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPremiumInUnderlying',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getStraddle',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getStraddleAssetPrice',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getStraddleEpoch',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getStraddleExpiries',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getStraddleExpiry',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getStraddleSettlementPrice',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getStraddleVolatility',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserLpPositions',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserPurchasePositions',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'hasEpochExpired',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'isContract',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'killLpPosition',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'multiAddToLp',
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'multiFillLpPosition',
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'multiKillLpPosition',
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'multiSettle',
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'removeFromContractWhitelist',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setAddresses',
    values: [IStraddleLp.AddressesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'settle',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'updateStraddleExpiry',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'whitelistedContracts',
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: 'addToContractWhitelist',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'addToLp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addresses', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'calculatePremium',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculatePutOptionPnl',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'emergencyWithdrawn',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'fillLpPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAllLpPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAllPurchasePositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getEpochStrikeLiquidity',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getEpochStrikes',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPremiumInUnderlying',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getStraddle',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getStraddleAssetPrice',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getStraddleEpoch',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getStraddleExpiries',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getStraddleExpiry',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getStraddleSettlementPrice',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getStraddleVolatility',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserLpPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserPurchasePositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'hasEpochExpired',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'isContract', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'killLpPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'multiAddToLp',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'multiFillLpPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'multiKillLpPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'multiSettle',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'removeFromContractWhitelist',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAddresses',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'settle', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'updateStraddleExpiry',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'whitelistedContracts',
    data: BytesLike
  ): Result;

  events: {
    'AddToContractWhitelist(address)': EventFragment;
    'AddressesSet(tuple)': EventFragment;
    'EmergencyWithdrawn(address)': EventFragment;
    'LPDustCleared(uint256,uint256)': EventFragment;
    'LPPositionFilled(uint256,uint256,uint256,uint256,uint256,address)': EventFragment;
    'LPPositionKilled(uint256,uint256)': EventFragment;
    'LiquidityAdded(uint256,uint256,uint256,uint256,address)': EventFragment;
    'LpPositionKillAndTransfer(uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'RemoveFromContractWhitelist(address)': EventFragment;
    'Settled(uint256,uint256)': EventFragment;
    'StraddleExpiryUpdated(uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddToContractWhitelist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AddressesSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LPDustCleared'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LPPositionFilled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LPPositionKilled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidityAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LpPositionKillAndTransfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'RemoveFromContractWhitelist'
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Settled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StraddleExpiryUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export interface AddToContractWhitelistEventObject {
  _contract: string;
}
export type AddToContractWhitelistEvent = TypedEvent<
  [string],
  AddToContractWhitelistEventObject
>;

export type AddToContractWhitelistEventFilter =
  TypedEventFilter<AddToContractWhitelistEvent>;

export interface AddressesSetEventObject {
  addresses: IStraddleLp.AddressesStructOutput;
}
export type AddressesSetEvent = TypedEvent<
  [IStraddleLp.AddressesStructOutput],
  AddressesSetEventObject
>;

export type AddressesSetEventFilter = TypedEventFilter<AddressesSetEvent>;

export interface EmergencyWithdrawnEventObject {
  caller: string;
}
export type EmergencyWithdrawnEvent = TypedEvent<
  [string],
  EmergencyWithdrawnEventObject
>;

export type EmergencyWithdrawnEventFilter =
  TypedEventFilter<EmergencyWithdrawnEvent>;

export interface LPDustClearedEventObject {
  strike: BigNumber;
  index: BigNumber;
}
export type LPDustClearedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LPDustClearedEventObject
>;

export type LPDustClearedEventFilter = TypedEventFilter<LPDustClearedEvent>;

export interface LPPositionFilledEventObject {
  receiptId: BigNumber;
  strike: BigNumber;
  index: BigNumber;
  amount: BigNumber;
  premium: BigNumber;
  buyer: string;
}
export type LPPositionFilledEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string],
  LPPositionFilledEventObject
>;

export type LPPositionFilledEventFilter =
  TypedEventFilter<LPPositionFilledEvent>;

export interface LPPositionKilledEventObject {
  strike: BigNumber;
  index: BigNumber;
}
export type LPPositionKilledEvent = TypedEvent<
  [BigNumber, BigNumber],
  LPPositionKilledEventObject
>;

export type LPPositionKilledEventFilter =
  TypedEventFilter<LPPositionKilledEvent>;

export interface LiquidityAddedEventObject {
  lpId: BigNumber;
  strike: BigNumber;
  amount: BigNumber;
  usdLiquidity: BigNumber;
  seller: string;
}
export type LiquidityAddedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string],
  LiquidityAddedEventObject
>;

export type LiquidityAddedEventFilter = TypedEventFilter<LiquidityAddedEvent>;

export interface LpPositionKillAndTransferEventObject {
  strike: BigNumber;
  index: BigNumber;
}
export type LpPositionKillAndTransferEvent = TypedEvent<
  [BigNumber, BigNumber],
  LpPositionKillAndTransferEventObject
>;

export type LpPositionKillAndTransferEventFilter =
  TypedEventFilter<LpPositionKillAndTransferEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RemoveFromContractWhitelistEventObject {
  _contract: string;
}
export type RemoveFromContractWhitelistEvent = TypedEvent<
  [string],
  RemoveFromContractWhitelistEventObject
>;

export type RemoveFromContractWhitelistEventFilter =
  TypedEventFilter<RemoveFromContractWhitelistEvent>;

export interface SettledEventObject {
  strike: BigNumber;
  receiptIndex: BigNumber;
}
export type SettledEvent = TypedEvent<
  [BigNumber, BigNumber],
  SettledEventObject
>;

export type SettledEventFilter = TypedEventFilter<SettledEvent>;

export interface StraddleExpiryUpdatedEventObject {
  expiry: BigNumber;
}
export type StraddleExpiryUpdatedEvent = TypedEvent<
  [BigNumber],
  StraddleExpiryUpdatedEventObject
>;

export type StraddleExpiryUpdatedEventFilter =
  TypedEventFilter<StraddleExpiryUpdatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface StraddleLp extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StraddleLpInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToLp(
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      markup: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      isUsd: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addresses(overrides?: CallOverrides): Promise<
      [string, string, string, string, string] & {
        usd: string;
        straddle: string;
        underlying: string;
        optionPricing: string;
        assetSwapper: string;
      }
    >;

    calculatePremium(
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      volatility: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculatePutOptionPnl(
      epoch: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    emergencyWithdrawn(
      tokens: PromiseOrValue<string>[],
      transferNative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillLpPosition(
      strike: PromiseOrValue<BigNumberish>,
      lpIndex: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isUsd: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllLpPositions(
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IStraddleLp.LpPositionStructOutput[]]>;

    getAllPurchasePositions(
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IStraddleLp.PurchaseReceiptStructOutput[]]>;

    getEpochStrikeLiquidity(
      epoch: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IStraddleLp.LiquidityStructOutput]>;

    getEpochStrikes(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { strikes: BigNumber[] }>;

    getPremiumInUnderlying(
      usdPremium: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStraddle(overrides?: CallOverrides): Promise<[string]>;

    getStraddleAssetPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStraddleEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStraddleExpiries(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getStraddleExpiry(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStraddleSettlementPrice(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStraddleVolatility(
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserLpPositions(
      strike: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IStraddleLp.LpPositionStructOutput[]] & {
        positions: IStraddleLp.LpPositionStructOutput[];
      }
    >;

    getUserPurchasePositions(
      strike: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IStraddleLp.PurchaseReceiptStructOutput[]] & {
        positions: IStraddleLp.PurchaseReceiptStructOutput[];
      }
    >;

    hasEpochExpired(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isContract(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    killLpPosition(
      strike: PromiseOrValue<BigNumberish>,
      lpIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multiAddToLp(
      strikes: PromiseOrValue<BigNumberish>[],
      liquidity: PromiseOrValue<BigNumberish>[],
      markup: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      isUsd: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multiFillLpPosition(
      strikes: PromiseOrValue<BigNumberish>[],
      lpIndices: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      isUsd: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multiKillLpPosition(
      strikes: PromiseOrValue<BigNumberish>[],
      lpIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multiSettle(
      strikes: PromiseOrValue<BigNumberish>[],
      receiptIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeFromContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _addresses: IStraddleLp.AddressesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settle(
      strike: PromiseOrValue<BigNumberish>,
      receiptIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateStraddleExpiry(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addToContractWhitelist(
    _contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToLp(
    strike: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    markup: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    isUsd: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addresses(overrides?: CallOverrides): Promise<
    [string, string, string, string, string] & {
      usd: string;
      straddle: string;
      underlying: string;
      optionPricing: string;
      assetSwapper: string;
    }
  >;

  calculatePremium(
    strike: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    volatility: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePutOptionPnl(
    epoch: PromiseOrValue<BigNumberish>,
    strike: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  emergencyWithdrawn(
    tokens: PromiseOrValue<string>[],
    transferNative: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillLpPosition(
    strike: PromiseOrValue<BigNumberish>,
    lpIndex: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    isUsd: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllLpPositions(
    strike: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IStraddleLp.LpPositionStructOutput[]>;

  getAllPurchasePositions(
    strike: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IStraddleLp.PurchaseReceiptStructOutput[]>;

  getEpochStrikeLiquidity(
    epoch: PromiseOrValue<BigNumberish>,
    strike: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IStraddleLp.LiquidityStructOutput>;

  getEpochStrikes(
    epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPremiumInUnderlying(
    usdPremium: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStraddle(overrides?: CallOverrides): Promise<string>;

  getStraddleAssetPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getStraddleEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  getStraddleExpiries(overrides?: CallOverrides): Promise<BigNumber[]>;

  getStraddleExpiry(overrides?: CallOverrides): Promise<BigNumber>;

  getStraddleSettlementPrice(
    epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStraddleVolatility(
    strike: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserLpPositions(
    strike: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IStraddleLp.LpPositionStructOutput[]>;

  getUserPurchasePositions(
    strike: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IStraddleLp.PurchaseReceiptStructOutput[]>;

  hasEpochExpired(
    epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isContract(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  killLpPosition(
    strike: PromiseOrValue<BigNumberish>,
    lpIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multiAddToLp(
    strikes: PromiseOrValue<BigNumberish>[],
    liquidity: PromiseOrValue<BigNumberish>[],
    markup: PromiseOrValue<BigNumberish>[],
    to: PromiseOrValue<string>,
    isUsd: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multiFillLpPosition(
    strikes: PromiseOrValue<BigNumberish>[],
    lpIndices: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    isUsd: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multiKillLpPosition(
    strikes: PromiseOrValue<BigNumberish>[],
    lpIndices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multiSettle(
    strikes: PromiseOrValue<BigNumberish>[],
    receiptIndices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeFromContractWhitelist(
    _contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _addresses: IStraddleLp.AddressesStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settle(
    strike: PromiseOrValue<BigNumberish>,
    receiptIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateStraddleExpiry(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistedContracts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addToContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addToLp(
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      markup: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      isUsd: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addresses(overrides?: CallOverrides): Promise<
      [string, string, string, string, string] & {
        usd: string;
        straddle: string;
        underlying: string;
        optionPricing: string;
        assetSwapper: string;
      }
    >;

    calculatePremium(
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      volatility: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePutOptionPnl(
      epoch: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyWithdrawn(
      tokens: PromiseOrValue<string>[],
      transferNative: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    fillLpPosition(
      strike: PromiseOrValue<BigNumberish>,
      lpIndex: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isUsd: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAllLpPositions(
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IStraddleLp.LpPositionStructOutput[]>;

    getAllPurchasePositions(
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IStraddleLp.PurchaseReceiptStructOutput[]>;

    getEpochStrikeLiquidity(
      epoch: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IStraddleLp.LiquidityStructOutput>;

    getEpochStrikes(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPremiumInUnderlying(
      usdPremium: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStraddle(overrides?: CallOverrides): Promise<string>;

    getStraddleAssetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getStraddleEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getStraddleExpiries(overrides?: CallOverrides): Promise<BigNumber[]>;

    getStraddleExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    getStraddleSettlementPrice(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStraddleVolatility(
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLpPositions(
      strike: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IStraddleLp.LpPositionStructOutput[]>;

    getUserPurchasePositions(
      strike: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IStraddleLp.PurchaseReceiptStructOutput[]>;

    hasEpochExpired(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isContract(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    killLpPosition(
      strike: PromiseOrValue<BigNumberish>,
      lpIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multiAddToLp(
      strikes: PromiseOrValue<BigNumberish>[],
      liquidity: PromiseOrValue<BigNumberish>[],
      markup: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      isUsd: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multiFillLpPosition(
      strikes: PromiseOrValue<BigNumberish>[],
      lpIndices: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      isUsd: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multiKillLpPosition(
      strikes: PromiseOrValue<BigNumberish>[],
      lpIndices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    multiSettle(
      strikes: PromiseOrValue<BigNumberish>[],
      receiptIndices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeFromContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAddresses(
      _addresses: IStraddleLp.AddressesStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    settle(
      strike: PromiseOrValue<BigNumberish>,
      receiptIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateStraddleExpiry(overrides?: CallOverrides): Promise<boolean>;

    whitelistedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    'AddToContractWhitelist(address)'(
      _contract?: PromiseOrValue<string> | null
    ): AddToContractWhitelistEventFilter;
    AddToContractWhitelist(
      _contract?: PromiseOrValue<string> | null
    ): AddToContractWhitelistEventFilter;

    'AddressesSet(tuple)'(addresses?: null): AddressesSetEventFilter;
    AddressesSet(addresses?: null): AddressesSetEventFilter;

    'EmergencyWithdrawn(address)'(caller?: null): EmergencyWithdrawnEventFilter;
    EmergencyWithdrawn(caller?: null): EmergencyWithdrawnEventFilter;

    'LPDustCleared(uint256,uint256)'(
      strike?: null,
      index?: null
    ): LPDustClearedEventFilter;
    LPDustCleared(strike?: null, index?: null): LPDustClearedEventFilter;

    'LPPositionFilled(uint256,uint256,uint256,uint256,uint256,address)'(
      receiptId?: null,
      strike?: null,
      index?: null,
      amount?: null,
      premium?: null,
      buyer?: PromiseOrValue<string> | null
    ): LPPositionFilledEventFilter;
    LPPositionFilled(
      receiptId?: null,
      strike?: null,
      index?: null,
      amount?: null,
      premium?: null,
      buyer?: PromiseOrValue<string> | null
    ): LPPositionFilledEventFilter;

    'LPPositionKilled(uint256,uint256)'(
      strike?: null,
      index?: null
    ): LPPositionKilledEventFilter;
    LPPositionKilled(strike?: null, index?: null): LPPositionKilledEventFilter;

    'LiquidityAdded(uint256,uint256,uint256,uint256,address)'(
      lpId?: null,
      strike?: null,
      amount?: null,
      usdLiquidity?: null,
      seller?: PromiseOrValue<string> | null
    ): LiquidityAddedEventFilter;
    LiquidityAdded(
      lpId?: null,
      strike?: null,
      amount?: null,
      usdLiquidity?: null,
      seller?: PromiseOrValue<string> | null
    ): LiquidityAddedEventFilter;

    'LpPositionKillAndTransfer(uint256,uint256)'(
      strike?: null,
      index?: null
    ): LpPositionKillAndTransferEventFilter;
    LpPositionKillAndTransfer(
      strike?: null,
      index?: null
    ): LpPositionKillAndTransferEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'RemoveFromContractWhitelist(address)'(
      _contract?: PromiseOrValue<string> | null
    ): RemoveFromContractWhitelistEventFilter;
    RemoveFromContractWhitelist(
      _contract?: PromiseOrValue<string> | null
    ): RemoveFromContractWhitelistEventFilter;

    'Settled(uint256,uint256)'(
      strike?: null,
      receiptIndex?: null
    ): SettledEventFilter;
    Settled(strike?: null, receiptIndex?: null): SettledEventFilter;

    'StraddleExpiryUpdated(uint256)'(
      expiry?: null
    ): StraddleExpiryUpdatedEventFilter;
    StraddleExpiryUpdated(expiry?: null): StraddleExpiryUpdatedEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    addToContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToLp(
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      markup: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      isUsd: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addresses(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePremium(
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      volatility: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePutOptionPnl(
      epoch: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyWithdrawn(
      tokens: PromiseOrValue<string>[],
      transferNative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillLpPosition(
      strike: PromiseOrValue<BigNumberish>,
      lpIndex: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isUsd: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllLpPositions(
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllPurchasePositions(
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochStrikeLiquidity(
      epoch: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochStrikes(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPremiumInUnderlying(
      usdPremium: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStraddle(overrides?: CallOverrides): Promise<BigNumber>;

    getStraddleAssetPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getStraddleEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getStraddleExpiries(overrides?: CallOverrides): Promise<BigNumber>;

    getStraddleExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    getStraddleSettlementPrice(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStraddleVolatility(
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLpPositions(
      strike: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPurchasePositions(
      strike: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasEpochExpired(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isContract(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    killLpPosition(
      strike: PromiseOrValue<BigNumberish>,
      lpIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multiAddToLp(
      strikes: PromiseOrValue<BigNumberish>[],
      liquidity: PromiseOrValue<BigNumberish>[],
      markup: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      isUsd: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multiFillLpPosition(
      strikes: PromiseOrValue<BigNumberish>[],
      lpIndices: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      isUsd: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multiKillLpPosition(
      strikes: PromiseOrValue<BigNumberish>[],
      lpIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multiSettle(
      strikes: PromiseOrValue<BigNumberish>[],
      receiptIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _addresses: IStraddleLp.AddressesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settle(
      strike: PromiseOrValue<BigNumberish>,
      receiptIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateStraddleExpiry(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToLp(
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      markup: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      isUsd: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculatePremium(
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      volatility: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePutOptionPnl(
      epoch: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawn(
      tokens: PromiseOrValue<string>[],
      transferNative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillLpPosition(
      strike: PromiseOrValue<BigNumberish>,
      lpIndex: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isUsd: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllLpPositions(
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllPurchasePositions(
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochStrikeLiquidity(
      epoch: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochStrikes(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPremiumInUnderlying(
      usdPremium: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStraddle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStraddleAssetPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStraddleEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStraddleExpiries(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStraddleExpiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStraddleSettlementPrice(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStraddleVolatility(
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserLpPositions(
      strike: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserPurchasePositions(
      strike: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasEpochExpired(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isContract(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    killLpPosition(
      strike: PromiseOrValue<BigNumberish>,
      lpIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multiAddToLp(
      strikes: PromiseOrValue<BigNumberish>[],
      liquidity: PromiseOrValue<BigNumberish>[],
      markup: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      isUsd: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multiFillLpPosition(
      strikes: PromiseOrValue<BigNumberish>[],
      lpIndices: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      isUsd: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multiKillLpPosition(
      strikes: PromiseOrValue<BigNumberish>[],
      lpIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multiSettle(
      strikes: PromiseOrValue<BigNumberish>[],
      receiptIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _addresses: IStraddleLp.AddressesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      strike: PromiseOrValue<BigNumberish>,
      receiptIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateStraddleExpiry(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
