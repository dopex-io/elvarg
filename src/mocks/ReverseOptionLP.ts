/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export declare namespace BaseLP {
  export type AddressesStruct = { usd: PromiseOrValue<string> };

  export type AddressesStructOutput = [string] & { usd: string };
}

export declare namespace ReverseOptionLP {
  export type LpPositionStruct = {
    lpId: PromiseOrValue<BigNumberish>;
    epoch: PromiseOrValue<BigNumberish>;
    strike: PromiseOrValue<BigNumberish>;
    numTokensProvided: PromiseOrValue<BigNumberish>;
    numTokensSold: PromiseOrValue<BigNumberish>;
    markup: PromiseOrValue<BigNumberish>;
    usdReceived: PromiseOrValue<BigNumberish>;
    seller: PromiseOrValue<string>;
    killed: PromiseOrValue<boolean>;
  };

  export type LpPositionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    boolean
  ] & {
    lpId: BigNumber;
    epoch: BigNumber;
    strike: BigNumber;
    numTokensProvided: BigNumber;
    numTokensSold: BigNumber;
    markup: BigNumber;
    usdReceived: BigNumber;
    seller: string;
    killed: boolean;
  };
}

export interface ReverseOptionLPInterface extends utils.Interface {
  functions: {
    'addToContractWhitelist(address)': FunctionFragment;
    'addToLp(address,bool,uint256,uint256,uint256,address)': FunctionFragment;
    'addresses()': FunctionFragment;
    'emergencyWithdrawn(address[],bool)': FunctionFragment;
    'fillLpPosition(address,uint256,uint256)': FunctionFragment;
    'getAllLpPositions(address)': FunctionFragment;
    'getOptionTokenInfo(address)': FunctionFragment;
    'getSsov(address)': FunctionFragment;
    'getSsovEpoch(address)': FunctionFragment;
    'getSsovEpochExpiries(address)': FunctionFragment;
    'getSsovEpochStrikes(address,uint256)': FunctionFragment;
    'getSsovExpiry(address)': FunctionFragment;
    'getSsovOptionToken(address,uint256,uint256)': FunctionFragment;
    'getSsovOptionTokens(address,uint256)': FunctionFragment;
    'getSsovPremiumCalculation(address,uint256,uint256)': FunctionFragment;
    'getSsovUsdPremiumCalculation(address,uint256,uint256)': FunctionFragment;
    'getTokenVaultRegistry(address,bool)': FunctionFragment;
    'getUserLpPositions(address,address)': FunctionFragment;
    'isContract(address)': FunctionFragment;
    'killLpPosition(address,uint256)': FunctionFragment;
    'multiaddToLps(address,bool,uint256[],uint256[],uint256[],address)': FunctionFragment;
    'multifillLpPositions(address,uint256[],uint256[])': FunctionFragment;
    'multikillLpPositions(address,uint256[])': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'registerSsovForToken(address,bool,address)': FunctionFragment;
    'removeFromContractWhitelist(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setAddresses((address))': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'unregisterSsovForToken(address,bool)': FunctionFragment;
    'updateSsovEpoch(address)': FunctionFragment;
    'whitelistedContracts(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addToContractWhitelist'
      | 'addToLp'
      | 'addresses'
      | 'emergencyWithdrawn'
      | 'fillLpPosition'
      | 'getAllLpPositions'
      | 'getOptionTokenInfo'
      | 'getSsov'
      | 'getSsovEpoch'
      | 'getSsovEpochExpiries'
      | 'getSsovEpochStrikes'
      | 'getSsovExpiry'
      | 'getSsovOptionToken'
      | 'getSsovOptionTokens'
      | 'getSsovPremiumCalculation'
      | 'getSsovUsdPremiumCalculation'
      | 'getTokenVaultRegistry'
      | 'getUserLpPositions'
      | 'isContract'
      | 'killLpPosition'
      | 'multiaddToLps'
      | 'multifillLpPositions'
      | 'multikillLpPositions'
      | 'name'
      | 'owner'
      | 'pause'
      | 'paused'
      | 'registerSsovForToken'
      | 'removeFromContractWhitelist'
      | 'renounceOwnership'
      | 'setAddresses'
      | 'transferOwnership'
      | 'unpause'
      | 'unregisterSsovForToken'
      | 'updateSsovEpoch'
      | 'whitelistedContracts'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addToContractWhitelist',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'addToLp',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: 'addresses', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'emergencyWithdrawn',
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'fillLpPosition',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAllLpPositions',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getOptionTokenInfo',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getSsov',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getSsovEpoch',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getSsovEpochExpiries',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getSsovEpochStrikes',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getSsovExpiry',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getSsovOptionToken',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'getSsovOptionTokens',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getSsovPremiumCalculation',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'getSsovUsdPremiumCalculation',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'getTokenVaultRegistry',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserLpPositions',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'isContract',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'killLpPosition',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'multiaddToLps',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'multifillLpPositions',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'multikillLpPositions',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'registerSsovForToken',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeFromContractWhitelist',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setAddresses',
    values: [BaseLP.AddressesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'unregisterSsovForToken',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: 'updateSsovEpoch',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'whitelistedContracts',
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: 'addToContractWhitelist',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'addToLp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addresses', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'emergencyWithdrawn',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'fillLpPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAllLpPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOptionTokenInfo',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getSsov', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getSsovEpoch',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getSsovEpochExpiries',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getSsovEpochStrikes',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getSsovExpiry',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getSsovOptionToken',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getSsovOptionTokens',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getSsovPremiumCalculation',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getSsovUsdPremiumCalculation',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTokenVaultRegistry',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserLpPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'isContract', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'killLpPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'multiaddToLps',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'multifillLpPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'multikillLpPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'registerSsovForToken',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeFromContractWhitelist',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAddresses',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'unregisterSsovForToken',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateSsovEpoch',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'whitelistedContracts',
    data: BytesLike
  ): Result;

  events: {
    'AddToContractWhitelist(address)': EventFragment;
    'AddressesSet(tuple)': EventFragment;
    'EmergencyWithdrawn(address)': EventFragment;
    'LPDustCleared(address,uint256)': EventFragment;
    'LPPositionFilled(address,uint256,uint256,uint256,address)': EventFragment;
    'LPPositionKilled(address,uint256)': EventFragment;
    'LiquidityForStrikeAdded(address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'RemoveFromContractWhitelist(address)': EventFragment;
    'SsovExpiryUpdated(address,uint256)': EventFragment;
    'SsovForTokenRegistered(address,bool,address)': EventFragment;
    'SsovForTokenRemoved(address,bool,address)': EventFragment;
    'Unpaused(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddToContractWhitelist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AddressesSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LPDustCleared'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LPPositionFilled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LPPositionKilled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LiquidityForStrikeAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'RemoveFromContractWhitelist'
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SsovExpiryUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SsovForTokenRegistered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SsovForTokenRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
}

export interface AddToContractWhitelistEventObject {
  _contract: string;
}
export type AddToContractWhitelistEvent = TypedEvent<
  [string],
  AddToContractWhitelistEventObject
>;

export type AddToContractWhitelistEventFilter =
  TypedEventFilter<AddToContractWhitelistEvent>;

export interface AddressesSetEventObject {
  _addresses: BaseLP.AddressesStructOutput;
}
export type AddressesSetEvent = TypedEvent<
  [BaseLP.AddressesStructOutput],
  AddressesSetEventObject
>;

export type AddressesSetEventFilter = TypedEventFilter<AddressesSetEvent>;

export interface EmergencyWithdrawnEventObject {
  caller: string;
}
export type EmergencyWithdrawnEvent = TypedEvent<
  [string],
  EmergencyWithdrawnEventObject
>;

export type EmergencyWithdrawnEventFilter =
  TypedEventFilter<EmergencyWithdrawnEvent>;

export interface LPDustClearedEventObject {
  epochStrikeToken: string;
  index: BigNumber;
}
export type LPDustClearedEvent = TypedEvent<
  [string, BigNumber],
  LPDustClearedEventObject
>;

export type LPDustClearedEventFilter = TypedEventFilter<LPDustClearedEvent>;

export interface LPPositionFilledEventObject {
  epochStrikeToken: string;
  index: BigNumber;
  amount: BigNumber;
  premium: BigNumber;
  seller: string;
}
export type LPPositionFilledEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string],
  LPPositionFilledEventObject
>;

export type LPPositionFilledEventFilter =
  TypedEventFilter<LPPositionFilledEvent>;

export interface LPPositionKilledEventObject {
  epochStrikeToken: string;
  index: BigNumber;
}
export type LPPositionKilledEvent = TypedEvent<
  [string, BigNumber],
  LPPositionKilledEventObject
>;

export type LPPositionKilledEventFilter =
  TypedEventFilter<LPPositionKilledEvent>;

export interface LiquidityForStrikeAddedEventObject {
  epochStrikeToken: string;
  index: BigNumber;
}
export type LiquidityForStrikeAddedEvent = TypedEvent<
  [string, BigNumber],
  LiquidityForStrikeAddedEventObject
>;

export type LiquidityForStrikeAddedEventFilter =
  TypedEventFilter<LiquidityForStrikeAddedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RemoveFromContractWhitelistEventObject {
  _contract: string;
}
export type RemoveFromContractWhitelistEvent = TypedEvent<
  [string],
  RemoveFromContractWhitelistEventObject
>;

export type RemoveFromContractWhitelistEventFilter =
  TypedEventFilter<RemoveFromContractWhitelistEvent>;

export interface SsovExpiryUpdatedEventObject {
  ssov: string;
  expiry: BigNumber;
}
export type SsovExpiryUpdatedEvent = TypedEvent<
  [string, BigNumber],
  SsovExpiryUpdatedEventObject
>;

export type SsovExpiryUpdatedEventFilter =
  TypedEventFilter<SsovExpiryUpdatedEvent>;

export interface SsovForTokenRegisteredEventObject {
  token: string;
  isPut: boolean;
  ssov: string;
}
export type SsovForTokenRegisteredEvent = TypedEvent<
  [string, boolean, string],
  SsovForTokenRegisteredEventObject
>;

export type SsovForTokenRegisteredEventFilter =
  TypedEventFilter<SsovForTokenRegisteredEvent>;

export interface SsovForTokenRemovedEventObject {
  token: string;
  isPut: boolean;
  ssov: string;
}
export type SsovForTokenRemovedEvent = TypedEvent<
  [string, boolean, string],
  SsovForTokenRemovedEventObject
>;

export type SsovForTokenRemovedEventFilter =
  TypedEventFilter<SsovForTokenRemovedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface ReverseOptionLP extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReverseOptionLPInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToLp(
      token: PromiseOrValue<string>,
      isPut: PromiseOrValue<boolean>,
      strike: PromiseOrValue<BigNumberish>,
      numTokensProvided: PromiseOrValue<BigNumberish>,
      markup: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addresses(overrides?: CallOverrides): Promise<[string] & { usd: string }>;

    emergencyWithdrawn(
      tokens: PromiseOrValue<string>[],
      transferNative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillLpPosition(
      optionToken: PromiseOrValue<string>,
      lpIndex: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllLpPositions(
      optionToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ReverseOptionLP.LpPositionStructOutput[]]>;

    getOptionTokenInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        ssov: string;
        strike: BigNumber;
        tokenLiquidity: BigNumber;
      }
    >;

    getSsov(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSsovEpoch(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSsovEpochExpiries(
      ssov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getSsovEpochStrikes(
      vault: PromiseOrValue<string>,
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { strikes: BigNumber[] }>;

    getSsovExpiry(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSsovOptionToken(
      vault: PromiseOrValue<string>,
      epoch: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSsovOptionTokens(
      vault: PromiseOrValue<string>,
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { tokens: string[] }>;

    getSsovPremiumCalculation(
      vault: PromiseOrValue<string>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSsovUsdPremiumCalculation(
      vault: PromiseOrValue<string>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenVaultRegistry(
      token: PromiseOrValue<string>,
      isPut: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserLpPositions(
      user: PromiseOrValue<string>,
      optionToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [ReverseOptionLP.LpPositionStructOutput[]] & {
        positions: ReverseOptionLP.LpPositionStructOutput[];
      }
    >;

    isContract(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    killLpPosition(
      optionToken: PromiseOrValue<string>,
      lpIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multiaddToLps(
      token: PromiseOrValue<string>,
      isPut: PromiseOrValue<boolean>,
      strikes: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      markups: PromiseOrValue<BigNumberish>[],
      seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multifillLpPositions(
      optionToken: PromiseOrValue<string>,
      lpIndices: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multikillLpPositions(
      optionToken: PromiseOrValue<string>,
      lpIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    registerSsovForToken(
      token: PromiseOrValue<string>,
      isPut: PromiseOrValue<boolean>,
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeFromContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _addresses: BaseLP.AddressesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterSsovForToken(
      token: PromiseOrValue<string>,
      isPut: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSsovEpoch(
      ssov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addToContractWhitelist(
    _contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToLp(
    token: PromiseOrValue<string>,
    isPut: PromiseOrValue<boolean>,
    strike: PromiseOrValue<BigNumberish>,
    numTokensProvided: PromiseOrValue<BigNumberish>,
    markup: PromiseOrValue<BigNumberish>,
    seller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addresses(overrides?: CallOverrides): Promise<string>;

  emergencyWithdrawn(
    tokens: PromiseOrValue<string>[],
    transferNative: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillLpPosition(
    optionToken: PromiseOrValue<string>,
    lpIndex: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllLpPositions(
    optionToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ReverseOptionLP.LpPositionStructOutput[]>;

  getOptionTokenInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      ssov: string;
      strike: BigNumber;
      tokenLiquidity: BigNumber;
    }
  >;

  getSsov(
    vault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSsovEpoch(
    vault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSsovEpochExpiries(
    ssov: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getSsovEpochStrikes(
    vault: PromiseOrValue<string>,
    epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getSsovExpiry(
    vault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSsovOptionToken(
    vault: PromiseOrValue<string>,
    epoch: PromiseOrValue<BigNumberish>,
    strike: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSsovOptionTokens(
    vault: PromiseOrValue<string>,
    epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getSsovPremiumCalculation(
    vault: PromiseOrValue<string>,
    strike: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSsovUsdPremiumCalculation(
    vault: PromiseOrValue<string>,
    strike: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenVaultRegistry(
    token: PromiseOrValue<string>,
    isPut: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserLpPositions(
    user: PromiseOrValue<string>,
    optionToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ReverseOptionLP.LpPositionStructOutput[]>;

  isContract(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  killLpPosition(
    optionToken: PromiseOrValue<string>,
    lpIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multiaddToLps(
    token: PromiseOrValue<string>,
    isPut: PromiseOrValue<boolean>,
    strikes: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    markups: PromiseOrValue<BigNumberish>[],
    seller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multifillLpPositions(
    optionToken: PromiseOrValue<string>,
    lpIndices: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multikillLpPositions(
    optionToken: PromiseOrValue<string>,
    lpIndices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  registerSsovForToken(
    token: PromiseOrValue<string>,
    isPut: PromiseOrValue<boolean>,
    vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeFromContractWhitelist(
    _contract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _addresses: BaseLP.AddressesStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterSsovForToken(
    token: PromiseOrValue<string>,
    isPut: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSsovEpoch(
    ssov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistedContracts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addToContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addToLp(
      token: PromiseOrValue<string>,
      isPut: PromiseOrValue<boolean>,
      strike: PromiseOrValue<BigNumberish>,
      numTokensProvided: PromiseOrValue<BigNumberish>,
      markup: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addresses(overrides?: CallOverrides): Promise<string>;

    emergencyWithdrawn(
      tokens: PromiseOrValue<string>[],
      transferNative: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    fillLpPosition(
      optionToken: PromiseOrValue<string>,
      lpIndex: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAllLpPositions(
      optionToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ReverseOptionLP.LpPositionStructOutput[]>;

    getOptionTokenInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        ssov: string;
        strike: BigNumber;
        tokenLiquidity: BigNumber;
      }
    >;

    getSsov(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSsovEpoch(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSsovEpochExpiries(
      ssov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getSsovEpochStrikes(
      vault: PromiseOrValue<string>,
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getSsovExpiry(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSsovOptionToken(
      vault: PromiseOrValue<string>,
      epoch: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSsovOptionTokens(
      vault: PromiseOrValue<string>,
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getSsovPremiumCalculation(
      vault: PromiseOrValue<string>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSsovUsdPremiumCalculation(
      vault: PromiseOrValue<string>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenVaultRegistry(
      token: PromiseOrValue<string>,
      isPut: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserLpPositions(
      user: PromiseOrValue<string>,
      optionToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ReverseOptionLP.LpPositionStructOutput[]>;

    isContract(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    killLpPosition(
      optionToken: PromiseOrValue<string>,
      lpIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multiaddToLps(
      token: PromiseOrValue<string>,
      isPut: PromiseOrValue<boolean>,
      strikes: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      markups: PromiseOrValue<BigNumberish>[],
      seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multifillLpPositions(
      optionToken: PromiseOrValue<string>,
      lpIndices: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    multikillLpPositions(
      optionToken: PromiseOrValue<string>,
      lpIndices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    registerSsovForToken(
      token: PromiseOrValue<string>,
      isPut: PromiseOrValue<boolean>,
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeFromContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAddresses(
      _addresses: BaseLP.AddressesStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unregisterSsovForToken(
      token: PromiseOrValue<string>,
      isPut: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateSsovEpoch(
      ssov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelistedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    'AddToContractWhitelist(address)'(
      _contract?: PromiseOrValue<string> | null
    ): AddToContractWhitelistEventFilter;
    AddToContractWhitelist(
      _contract?: PromiseOrValue<string> | null
    ): AddToContractWhitelistEventFilter;

    'AddressesSet(tuple)'(_addresses?: null): AddressesSetEventFilter;
    AddressesSet(_addresses?: null): AddressesSetEventFilter;

    'EmergencyWithdrawn(address)'(caller?: null): EmergencyWithdrawnEventFilter;
    EmergencyWithdrawn(caller?: null): EmergencyWithdrawnEventFilter;

    'LPDustCleared(address,uint256)'(
      epochStrikeToken?: PromiseOrValue<string> | null,
      index?: null
    ): LPDustClearedEventFilter;
    LPDustCleared(
      epochStrikeToken?: PromiseOrValue<string> | null,
      index?: null
    ): LPDustClearedEventFilter;

    'LPPositionFilled(address,uint256,uint256,uint256,address)'(
      epochStrikeToken?: PromiseOrValue<string> | null,
      index?: null,
      amount?: null,
      premium?: null,
      seller?: PromiseOrValue<string> | null
    ): LPPositionFilledEventFilter;
    LPPositionFilled(
      epochStrikeToken?: PromiseOrValue<string> | null,
      index?: null,
      amount?: null,
      premium?: null,
      seller?: PromiseOrValue<string> | null
    ): LPPositionFilledEventFilter;

    'LPPositionKilled(address,uint256)'(
      epochStrikeToken?: PromiseOrValue<string> | null,
      index?: null
    ): LPPositionKilledEventFilter;
    LPPositionKilled(
      epochStrikeToken?: PromiseOrValue<string> | null,
      index?: null
    ): LPPositionKilledEventFilter;

    'LiquidityForStrikeAdded(address,uint256)'(
      epochStrikeToken?: PromiseOrValue<string> | null,
      index?: null
    ): LiquidityForStrikeAddedEventFilter;
    LiquidityForStrikeAdded(
      epochStrikeToken?: PromiseOrValue<string> | null,
      index?: null
    ): LiquidityForStrikeAddedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'RemoveFromContractWhitelist(address)'(
      _contract?: PromiseOrValue<string> | null
    ): RemoveFromContractWhitelistEventFilter;
    RemoveFromContractWhitelist(
      _contract?: PromiseOrValue<string> | null
    ): RemoveFromContractWhitelistEventFilter;

    'SsovExpiryUpdated(address,uint256)'(
      ssov?: null,
      expiry?: null
    ): SsovExpiryUpdatedEventFilter;
    SsovExpiryUpdated(ssov?: null, expiry?: null): SsovExpiryUpdatedEventFilter;

    'SsovForTokenRegistered(address,bool,address)'(
      token?: null,
      isPut?: null,
      ssov?: null
    ): SsovForTokenRegisteredEventFilter;
    SsovForTokenRegistered(
      token?: null,
      isPut?: null,
      ssov?: null
    ): SsovForTokenRegisteredEventFilter;

    'SsovForTokenRemoved(address,bool,address)'(
      token?: null,
      isPut?: null,
      ssov?: null
    ): SsovForTokenRemovedEventFilter;
    SsovForTokenRemoved(
      token?: null,
      isPut?: null,
      ssov?: null
    ): SsovForTokenRemovedEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    addToContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToLp(
      token: PromiseOrValue<string>,
      isPut: PromiseOrValue<boolean>,
      strike: PromiseOrValue<BigNumberish>,
      numTokensProvided: PromiseOrValue<BigNumberish>,
      markup: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addresses(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdrawn(
      tokens: PromiseOrValue<string>[],
      transferNative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillLpPosition(
      optionToken: PromiseOrValue<string>,
      lpIndex: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllLpPositions(
      optionToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOptionTokenInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSsov(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSsovEpoch(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSsovEpochExpiries(
      ssov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSsovEpochStrikes(
      vault: PromiseOrValue<string>,
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSsovExpiry(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSsovOptionToken(
      vault: PromiseOrValue<string>,
      epoch: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSsovOptionTokens(
      vault: PromiseOrValue<string>,
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSsovPremiumCalculation(
      vault: PromiseOrValue<string>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSsovUsdPremiumCalculation(
      vault: PromiseOrValue<string>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenVaultRegistry(
      token: PromiseOrValue<string>,
      isPut: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLpPositions(
      user: PromiseOrValue<string>,
      optionToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isContract(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    killLpPosition(
      optionToken: PromiseOrValue<string>,
      lpIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multiaddToLps(
      token: PromiseOrValue<string>,
      isPut: PromiseOrValue<boolean>,
      strikes: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      markups: PromiseOrValue<BigNumberish>[],
      seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multifillLpPositions(
      optionToken: PromiseOrValue<string>,
      lpIndices: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multikillLpPositions(
      optionToken: PromiseOrValue<string>,
      lpIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    registerSsovForToken(
      token: PromiseOrValue<string>,
      isPut: PromiseOrValue<boolean>,
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeFromContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _addresses: BaseLP.AddressesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterSsovForToken(
      token: PromiseOrValue<string>,
      isPut: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSsovEpoch(
      ssov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToLp(
      token: PromiseOrValue<string>,
      isPut: PromiseOrValue<boolean>,
      strike: PromiseOrValue<BigNumberish>,
      numTokensProvided: PromiseOrValue<BigNumberish>,
      markup: PromiseOrValue<BigNumberish>,
      seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdrawn(
      tokens: PromiseOrValue<string>[],
      transferNative: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillLpPosition(
      optionToken: PromiseOrValue<string>,
      lpIndex: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllLpPositions(
      optionToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOptionTokenInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSsov(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSsovEpoch(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSsovEpochExpiries(
      ssov: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSsovEpochStrikes(
      vault: PromiseOrValue<string>,
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSsovExpiry(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSsovOptionToken(
      vault: PromiseOrValue<string>,
      epoch: PromiseOrValue<BigNumberish>,
      strike: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSsovOptionTokens(
      vault: PromiseOrValue<string>,
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSsovPremiumCalculation(
      vault: PromiseOrValue<string>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSsovUsdPremiumCalculation(
      vault: PromiseOrValue<string>,
      strike: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenVaultRegistry(
      token: PromiseOrValue<string>,
      isPut: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserLpPositions(
      user: PromiseOrValue<string>,
      optionToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isContract(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    killLpPosition(
      optionToken: PromiseOrValue<string>,
      lpIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multiaddToLps(
      token: PromiseOrValue<string>,
      isPut: PromiseOrValue<boolean>,
      strikes: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      markups: PromiseOrValue<BigNumberish>[],
      seller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multifillLpPositions(
      optionToken: PromiseOrValue<string>,
      lpIndices: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multikillLpPositions(
      optionToken: PromiseOrValue<string>,
      lpIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerSsovForToken(
      token: PromiseOrValue<string>,
      isPut: PromiseOrValue<boolean>,
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeFromContractWhitelist(
      _contract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _addresses: BaseLP.AddressesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterSsovForToken(
      token: PromiseOrValue<string>,
      isPut: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSsovEpoch(
      ssov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
