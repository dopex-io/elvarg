/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface LongPerpStrategyInterface extends ethers.utils.Interface {
  functions: {
    'DopexPositionManagerImplementation()': FunctionFragment;
    'MAX_LEVERAGE()': FunctionFragment;
    'MIN_LEVERAGE()': FunctionFragment;
    'addToContractWhitelist(address)': FunctionFragment;
    'atlanticPools(bytes32)': FunctionFragment;
    'calculateKeeperFees(uint256)': FunctionFragment;
    'clearPositions()': FunctionFragment;
    'cleared()': FunctionFragment;
    'closePosition(uint256)': FunctionFragment;
    'collateralToken()': FunctionFragment;
    'decreaseManagedPosition(uint256)': FunctionFragment;
    'enableStrategy((address[],address,uint256,uint256,uint256,bytes32,bool),bool,uint8)': FunctionFragment;
    'from30DecimalUsd(address,uint256)': FunctionFragment;
    'getAllStrategyPositions()': FunctionFragment;
    'getPoolKey(address,bool,uint8)': FunctionFragment;
    'getUserPositionManagers(address)': FunctionFragment;
    'getUserStrategyPositions(address)': FunctionFragment;
    'getUserStrategyPositionsIndexes(address)': FunctionFragment;
    'gmxPositionRouter()': FunctionFragment;
    'gmxRouter()': FunctionFragment;
    'gmxVault()': FunctionFragment;
    'increaseDecreaseThreshold()': FunctionFragment;
    'increaseManagedPosition(uint256)': FunctionFragment;
    'isContract(address)': FunctionFragment;
    'isKeeper(address)': FunctionFragment;
    'isPositionSettled(uint256)': FunctionFragment;
    'isValidKeeper(address)': FunctionFragment;
    'isValidPositionManager(address)': FunctionFragment;
    'keepCollateral(uint256)': FunctionFragment;
    'keeperFeesPercentage()': FunctionFragment;
    'minExecutionFee()': FunctionFragment;
    'optionStrikeOffsetPercentage()': FunctionFragment;
    'owner()': FunctionFragment;
    'removeFromContractWhitelist(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setAtlanticPools(address,bool,uint8,address)': FunctionFragment;
    'setOptionOffsetPercentage(uint256)': FunctionFragment;
    'setPositionKeeper(address,bool)': FunctionFragment;
    'strategyPositions(uint256)': FunctionFragment;
    'swapRouter()': FunctionFragment;
    'to30DecimalUsd(address,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unsettlePositionsStartIndex()': FunctionFragment;
    'userStrategyPositions(address,uint256)': FunctionFragment;
    'whitelistedContracts(address)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'DopexPositionManagerImplementation',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'MAX_LEVERAGE',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'MIN_LEVERAGE',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'addToContractWhitelist',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'atlanticPools',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateKeeperFees',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'clearPositions',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'cleared', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'closePosition',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'collateralToken',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'decreaseManagedPosition',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'enableStrategy',
    values: [
      {
        path: string[];
        indexToken: string;
        positionCollateralSize: BigNumberish;
        positionSize: BigNumberish;
        executionFee: BigNumberish;
        referralCode: BytesLike;
        isCollateralOptionToken: boolean;
      },
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'from30DecimalUsd',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAllStrategyPositions',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getPoolKey',
    values: [string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserPositionManagers',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserStrategyPositions',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserStrategyPositionsIndexes',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'gmxPositionRouter',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'gmxRouter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'gmxVault', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'increaseDecreaseThreshold',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'increaseManagedPosition',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'isContract', values: [string]): string;
  encodeFunctionData(functionFragment: 'isKeeper', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'isPositionSettled',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'isValidKeeper',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'isValidPositionManager',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'keepCollateral',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'keeperFeesPercentage',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'minExecutionFee',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'optionStrikeOffsetPercentage',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'removeFromContractWhitelist',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setAtlanticPools',
    values: [string, boolean, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'setOptionOffsetPercentage',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setPositionKeeper',
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'strategyPositions',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'swapRouter',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'to30DecimalUsd',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'unsettlePositionsStartIndex',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'userStrategyPositions',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'whitelistedContracts',
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: 'DopexPositionManagerImplementation',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MAX_LEVERAGE',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MIN_LEVERAGE',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'addToContractWhitelist',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'atlanticPools',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculateKeeperFees',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'clearPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'cleared', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'closePosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'collateralToken',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'decreaseManagedPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'enableStrategy',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'from30DecimalUsd',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAllStrategyPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getPoolKey', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getUserPositionManagers',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserStrategyPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserStrategyPositionsIndexes',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'gmxPositionRouter',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'gmxRouter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gmxVault', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'increaseDecreaseThreshold',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increaseManagedPosition',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'isContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isKeeper', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isPositionSettled',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isValidKeeper',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isValidPositionManager',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'keepCollateral',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'keeperFeesPercentage',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'minExecutionFee',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'optionStrikeOffsetPercentage',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'removeFromContractWhitelist',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAtlanticPools',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setOptionOffsetPercentage',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setPositionKeeper',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'strategyPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'swapRouter', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'to30DecimalUsd',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unsettlePositionsStartIndex',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userStrategyPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'whitelistedContracts',
    data: BytesLike
  ): Result;

  events: {
    'AddToContractWhitelist(address)': EventFragment;
    'NewOptionStrikeOffsetPercentageSet(uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'RemoveFromContractWhitelist(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddToContractWhitelist'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'NewOptionStrikeOffsetPercentageSet'
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'RemoveFromContractWhitelist'
  ): EventFragment;
}

export type AddToContractWhitelistEvent = TypedEvent<
  [string] & { _contract: string }
>;

export type NewOptionStrikeOffsetPercentageSetEvent = TypedEvent<
  [BigNumber] & { arg0: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RemoveFromContractWhitelistEvent = TypedEvent<
  [string] & { _contract: string }
>;

export class LongPerpStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LongPerpStrategyInterface;

  functions: {
    DopexPositionManagerImplementation(
      overrides?: CallOverrides
    ): Promise<[string]>;

    MAX_LEVERAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_LEVERAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addToContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    atlanticPools(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    calculateKeeperFees(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    clearPositions(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cleared(overrides?: CallOverrides): Promise<[boolean]>;

    closePosition(
      index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    decreaseManagedPosition(
      StrategyPositionKey: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableStrategy(
      params: {
        path: string[];
        indexToken: string;
        positionCollateralSize: BigNumberish;
        positionSize: BigNumberish;
        executionFee: BigNumberish;
        referralCode: BytesLike;
        isCollateralOptionToken: boolean;
      },
      keepCollateralOnExpiry: boolean,
      expiryType: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    from30DecimalUsd(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    getAllStrategyPositions(overrides?: CallOverrides): Promise<
      [
        ([
          string[],
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
          number
        ] & {
          path: string[];
          dopexPositionManager: string;
          indexToken: string;
          user: string;
          collateralAccess: BigNumber;
          putStrike: BigNumber;
          optionsAmount: BigNumber;
          poolsEpoch: BigNumber;
          maxStrikeCollateralIndex: BigNumber;
          fundingRate: BigNumber;
          isCollateralOptionToken: boolean;
          hasBorrowed: boolean;
          keepCollateral: boolean;
          expiry: number;
        })[]
      ] & {
        result: ([
          string[],
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
          number
        ] & {
          path: string[];
          dopexPositionManager: string;
          indexToken: string;
          user: string;
          collateralAccess: BigNumber;
          putStrike: BigNumber;
          optionsAmount: BigNumber;
          poolsEpoch: BigNumber;
          maxStrikeCollateralIndex: BigNumber;
          fundingRate: BigNumber;
          isCollateralOptionToken: boolean;
          hasBorrowed: boolean;
          keepCollateral: boolean;
          expiry: number;
        })[];
      }
    >;

    getPoolKey(
      underlying: string,
      isPut: boolean,
      expiryType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserPositionManagers(
      user: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { result: string[] }>;

    getUserStrategyPositions(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string[],
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
          number
        ] & {
          path: string[];
          dopexPositionManager: string;
          indexToken: string;
          user: string;
          collateralAccess: BigNumber;
          putStrike: BigNumber;
          optionsAmount: BigNumber;
          poolsEpoch: BigNumber;
          maxStrikeCollateralIndex: BigNumber;
          fundingRate: BigNumber;
          isCollateralOptionToken: boolean;
          hasBorrowed: boolean;
          keepCollateral: boolean;
          expiry: number;
        })[]
      ] & {
        result: ([
          string[],
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
          number
        ] & {
          path: string[];
          dopexPositionManager: string;
          indexToken: string;
          user: string;
          collateralAccess: BigNumber;
          putStrike: BigNumber;
          optionsAmount: BigNumber;
          poolsEpoch: BigNumber;
          maxStrikeCollateralIndex: BigNumber;
          fundingRate: BigNumber;
          isCollateralOptionToken: boolean;
          hasBorrowed: boolean;
          keepCollateral: boolean;
          expiry: number;
        })[];
      }
    >;

    getUserStrategyPositionsIndexes(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { result: BigNumber[] }>;

    gmxPositionRouter(overrides?: CallOverrides): Promise<[string]>;

    gmxRouter(overrides?: CallOverrides): Promise<[string]>;

    gmxVault(overrides?: CallOverrides): Promise<[string]>;

    increaseDecreaseThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseManagedPosition(
      StrategyPositionKey: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isContract(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isKeeper(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isPositionSettled(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidKeeper(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isValidPositionManager(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    keepCollateral(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    keeperFeesPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    minExecutionFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    optionStrikeOffsetPercentage(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAtlanticPools(
      underlying: string,
      isPut: boolean,
      expiryType: BigNumberish,
      atlanticPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOptionOffsetPercentage(
      offset: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPositionKeeper(
      keeper: string,
      asKeeper: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategyPositions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        number
      ] & {
        dopexPositionManager: string;
        indexToken: string;
        user: string;
        collateralAccess: BigNumber;
        putStrike: BigNumber;
        optionsAmount: BigNumber;
        poolsEpoch: BigNumber;
        maxStrikeCollateralIndex: BigNumber;
        fundingRate: BigNumber;
        isCollateralOptionToken: boolean;
        hasBorrowed: boolean;
        keepCollateral: boolean;
        expiry: number;
      }
    >;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    to30DecimalUsd(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unsettlePositionsStartIndex(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userStrategyPositions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    whitelistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DopexPositionManagerImplementation(
    overrides?: CallOverrides
  ): Promise<string>;

  MAX_LEVERAGE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_LEVERAGE(overrides?: CallOverrides): Promise<BigNumber>;

  addToContractWhitelist(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  atlanticPools(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  calculateKeeperFees(
    balance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  clearPositions(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cleared(overrides?: CallOverrides): Promise<boolean>;

  closePosition(
    index: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  decreaseManagedPosition(
    StrategyPositionKey: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableStrategy(
    params: {
      path: string[];
      indexToken: string;
      positionCollateralSize: BigNumberish;
      positionSize: BigNumberish;
      executionFee: BigNumberish;
      referralCode: BytesLike;
      isCollateralOptionToken: boolean;
    },
    keepCollateralOnExpiry: boolean,
    expiryType: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  from30DecimalUsd(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAllStrategyPositions(overrides?: CallOverrides): Promise<
    ([
      string[],
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      number
    ] & {
      path: string[];
      dopexPositionManager: string;
      indexToken: string;
      user: string;
      collateralAccess: BigNumber;
      putStrike: BigNumber;
      optionsAmount: BigNumber;
      poolsEpoch: BigNumber;
      maxStrikeCollateralIndex: BigNumber;
      fundingRate: BigNumber;
      isCollateralOptionToken: boolean;
      hasBorrowed: boolean;
      keepCollateral: boolean;
      expiry: number;
    })[]
  >;

  getPoolKey(
    underlying: string,
    isPut: boolean,
    expiryType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserPositionManagers(
    user: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getUserStrategyPositions(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string[],
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      number
    ] & {
      path: string[];
      dopexPositionManager: string;
      indexToken: string;
      user: string;
      collateralAccess: BigNumber;
      putStrike: BigNumber;
      optionsAmount: BigNumber;
      poolsEpoch: BigNumber;
      maxStrikeCollateralIndex: BigNumber;
      fundingRate: BigNumber;
      isCollateralOptionToken: boolean;
      hasBorrowed: boolean;
      keepCollateral: boolean;
      expiry: number;
    })[]
  >;

  getUserStrategyPositionsIndexes(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  gmxPositionRouter(overrides?: CallOverrides): Promise<string>;

  gmxRouter(overrides?: CallOverrides): Promise<string>;

  gmxVault(overrides?: CallOverrides): Promise<string>;

  increaseDecreaseThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  increaseManagedPosition(
    StrategyPositionKey: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isContract(addr: string, overrides?: CallOverrides): Promise<boolean>;

  isKeeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isPositionSettled(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidKeeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isValidPositionManager(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  keepCollateral(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  keeperFeesPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  minExecutionFee(overrides?: CallOverrides): Promise<BigNumber>;

  optionStrikeOffsetPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeFromContractWhitelist(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAtlanticPools(
    underlying: string,
    isPut: boolean,
    expiryType: BigNumberish,
    atlanticPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOptionOffsetPercentage(
    offset: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPositionKeeper(
    keeper: string,
    asKeeper: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategyPositions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
      number
    ] & {
      dopexPositionManager: string;
      indexToken: string;
      user: string;
      collateralAccess: BigNumber;
      putStrike: BigNumber;
      optionsAmount: BigNumber;
      poolsEpoch: BigNumber;
      maxStrikeCollateralIndex: BigNumber;
      fundingRate: BigNumber;
      isCollateralOptionToken: boolean;
      hasBorrowed: boolean;
      keepCollateral: boolean;
      expiry: number;
    }
  >;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  to30DecimalUsd(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unsettlePositionsStartIndex(overrides?: CallOverrides): Promise<BigNumber>;

  userStrategyPositions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  whitelistedContracts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DopexPositionManagerImplementation(
      overrides?: CallOverrides
    ): Promise<string>;

    MAX_LEVERAGE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LEVERAGE(overrides?: CallOverrides): Promise<BigNumber>;

    addToContractWhitelist(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    atlanticPools(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    calculateKeeperFees(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearPositions(overrides?: CallOverrides): Promise<void>;

    cleared(overrides?: CallOverrides): Promise<boolean>;

    closePosition(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    decreaseManagedPosition(
      StrategyPositionKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enableStrategy(
      params: {
        path: string[];
        indexToken: string;
        positionCollateralSize: BigNumberish;
        positionSize: BigNumberish;
        executionFee: BigNumberish;
        referralCode: BytesLike;
        isCollateralOptionToken: boolean;
      },
      keepCollateralOnExpiry: boolean,
      expiryType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    from30DecimalUsd(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllStrategyPositions(overrides?: CallOverrides): Promise<
      ([
        string[],
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        number
      ] & {
        path: string[];
        dopexPositionManager: string;
        indexToken: string;
        user: string;
        collateralAccess: BigNumber;
        putStrike: BigNumber;
        optionsAmount: BigNumber;
        poolsEpoch: BigNumber;
        maxStrikeCollateralIndex: BigNumber;
        fundingRate: BigNumber;
        isCollateralOptionToken: boolean;
        hasBorrowed: boolean;
        keepCollateral: boolean;
        expiry: number;
      })[]
    >;

    getPoolKey(
      underlying: string,
      isPut: boolean,
      expiryType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserPositionManagers(
      user: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getUserStrategyPositions(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string[],
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        number
      ] & {
        path: string[];
        dopexPositionManager: string;
        indexToken: string;
        user: string;
        collateralAccess: BigNumber;
        putStrike: BigNumber;
        optionsAmount: BigNumber;
        poolsEpoch: BigNumber;
        maxStrikeCollateralIndex: BigNumber;
        fundingRate: BigNumber;
        isCollateralOptionToken: boolean;
        hasBorrowed: boolean;
        keepCollateral: boolean;
        expiry: number;
      })[]
    >;

    getUserStrategyPositionsIndexes(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    gmxPositionRouter(overrides?: CallOverrides): Promise<string>;

    gmxRouter(overrides?: CallOverrides): Promise<string>;

    gmxVault(overrides?: CallOverrides): Promise<string>;

    increaseDecreaseThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    increaseManagedPosition(
      StrategyPositionKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isContract(addr: string, overrides?: CallOverrides): Promise<boolean>;

    isKeeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isPositionSettled(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidKeeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isValidPositionManager(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    keepCollateral(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    keeperFeesPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    minExecutionFee(overrides?: CallOverrides): Promise<BigNumber>;

    optionStrikeOffsetPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAtlanticPools(
      underlying: string,
      isPut: boolean,
      expiryType: BigNumberish,
      atlanticPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOptionOffsetPercentage(
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPositionKeeper(
      keeper: string,
      asKeeper: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    strategyPositions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        number
      ] & {
        dopexPositionManager: string;
        indexToken: string;
        user: string;
        collateralAccess: BigNumber;
        putStrike: BigNumber;
        optionsAmount: BigNumber;
        poolsEpoch: BigNumber;
        maxStrikeCollateralIndex: BigNumber;
        fundingRate: BigNumber;
        isCollateralOptionToken: boolean;
        hasBorrowed: boolean;
        keepCollateral: boolean;
        expiry: number;
      }
    >;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    to30DecimalUsd(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unsettlePositionsStartIndex(overrides?: CallOverrides): Promise<BigNumber>;

    userStrategyPositions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    'AddToContractWhitelist(address)'(
      _contract?: string | null
    ): TypedEventFilter<[string], { _contract: string }>;

    AddToContractWhitelist(
      _contract?: string | null
    ): TypedEventFilter<[string], { _contract: string }>;

    'NewOptionStrikeOffsetPercentageSet(uint256)'(
      undefined?: null
    ): TypedEventFilter<[BigNumber], { arg0: BigNumber }>;

    NewOptionStrikeOffsetPercentageSet(
      undefined?: null
    ): TypedEventFilter<[BigNumber], { arg0: BigNumber }>;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    'RemoveFromContractWhitelist(address)'(
      _contract?: string | null
    ): TypedEventFilter<[string], { _contract: string }>;

    RemoveFromContractWhitelist(
      _contract?: string | null
    ): TypedEventFilter<[string], { _contract: string }>;
  };

  estimateGas: {
    DopexPositionManagerImplementation(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_LEVERAGE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LEVERAGE(overrides?: CallOverrides): Promise<BigNumber>;

    addToContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    atlanticPools(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateKeeperFees(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearPositions(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cleared(overrides?: CallOverrides): Promise<BigNumber>;

    closePosition(
      index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseManagedPosition(
      StrategyPositionKey: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableStrategy(
      params: {
        path: string[];
        indexToken: string;
        positionCollateralSize: BigNumberish;
        positionSize: BigNumberish;
        executionFee: BigNumberish;
        referralCode: BytesLike;
        isCollateralOptionToken: boolean;
      },
      keepCollateralOnExpiry: boolean,
      expiryType: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    from30DecimalUsd(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllStrategyPositions(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolKey(
      underlying: string,
      isPut: boolean,
      expiryType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPositionManagers(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStrategyPositions(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStrategyPositionsIndexes(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gmxPositionRouter(overrides?: CallOverrides): Promise<BigNumber>;

    gmxRouter(overrides?: CallOverrides): Promise<BigNumber>;

    gmxVault(overrides?: CallOverrides): Promise<BigNumber>;

    increaseDecreaseThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    increaseManagedPosition(
      StrategyPositionKey: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isContract(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isKeeper(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isPositionSettled(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidKeeper(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isValidPositionManager(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keepCollateral(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    keeperFeesPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    minExecutionFee(overrides?: CallOverrides): Promise<BigNumber>;

    optionStrikeOffsetPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAtlanticPools(
      underlying: string,
      isPut: boolean,
      expiryType: BigNumberish,
      atlanticPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOptionOffsetPercentage(
      offset: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPositionKeeper(
      keeper: string,
      asKeeper: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategyPositions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    to30DecimalUsd(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unsettlePositionsStartIndex(overrides?: CallOverrides): Promise<BigNumber>;

    userStrategyPositions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DopexPositionManagerImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_LEVERAGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_LEVERAGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addToContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    atlanticPools(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateKeeperFees(
      balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearPositions(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cleared(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closePosition(
      index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseManagedPosition(
      StrategyPositionKey: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableStrategy(
      params: {
        path: string[];
        indexToken: string;
        positionCollateralSize: BigNumberish;
        positionSize: BigNumberish;
        executionFee: BigNumberish;
        referralCode: BytesLike;
        isCollateralOptionToken: boolean;
      },
      keepCollateralOnExpiry: boolean,
      expiryType: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    from30DecimalUsd(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllStrategyPositions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolKey(
      underlying: string,
      isPut: boolean,
      expiryType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserPositionManagers(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStrategyPositions(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStrategyPositionsIndexes(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gmxPositionRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmxRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmxVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseDecreaseThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseManagedPosition(
      StrategyPositionKey: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isContract(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKeeper(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPositionSettled(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidKeeper(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidPositionManager(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keepCollateral(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    keeperFeesPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minExecutionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optionStrikeOffsetPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAtlanticPools(
      underlying: string,
      isPut: boolean,
      expiryType: BigNumberish,
      atlanticPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOptionOffsetPercentage(
      offset: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPositionKeeper(
      keeper: string,
      asKeeper: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategyPositions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    to30DecimalUsd(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unsettlePositionsStartIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userStrategyPositions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
