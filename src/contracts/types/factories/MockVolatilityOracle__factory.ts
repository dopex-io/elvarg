/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  MockVolatilityOracle,
  MockVolatilityOracleInterface,
} from '../MockVolatilityOracle';

const _abi = [
  {
    inputs: [],
    name: 'getVolatility',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'getVolatility',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x6080604052348015600f57600080fd5b5060ab8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80633af2888b146037578063c189c19b14604c575b600080fd5b60645b60405190815260200160405180910390f35b603a6057366004605d565b50606490565b600060208284031215606e57600080fd5b503591905056fea2646970667358221220f24938dba66602532614e9cf87896c8b07fbe58b8c9bab5a48d52127d96bc67464736f6c63430008090033';

export class MockVolatilityOracle__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockVolatilityOracle> {
    return super.deploy(overrides || {}) as Promise<MockVolatilityOracle>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockVolatilityOracle {
    return super.attach(address) as MockVolatilityOracle;
  }
  connect(signer: Signer): MockVolatilityOracle__factory {
    return super.connect(signer) as MockVolatilityOracle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockVolatilityOracleInterface {
    return new utils.Interface(_abi) as MockVolatilityOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockVolatilityOracle {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockVolatilityOracle;
  }
}
