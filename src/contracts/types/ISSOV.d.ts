/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface ISSOVInterface extends ethers.utils.Interface {
  functions: {
    'currentEpoch()': FunctionFragment;
    'deposit(uint256,uint256,address)': FunctionFragment;
    'getEpochStrikes(uint256)': FunctionFragment;
    'getRewardTokensToDistribute(uint256)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'writePosition(uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'currentEpoch',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getEpochStrikes',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getRewardTokensToDistribute',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'writePosition',
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: 'currentEpoch',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getEpochStrikes',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRewardTokensToDistribute',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'writePosition',
    data: BytesLike
  ): Result;

  events: {};
}

export class ISSOV extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISSOVInterface;

  functions: {
    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      strikeIndex: BigNumberish,
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEpochStrikes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getRewardTokensToDistribute(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    writePosition(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        epoch: BigNumber;
        strike: BigNumber;
        collateralAmount: BigNumber;
      }
    >;
  };

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    strikeIndex: BigNumberish,
    amount: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEpochStrikes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getRewardTokensToDistribute(
    epoch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  writePosition(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      timestamp: BigNumber;
      epoch: BigNumber;
      strike: BigNumber;
      collateralAmount: BigNumber;
    }
  >;

  callStatic: {
    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      strikeIndex: BigNumberish,
      amount: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochStrikes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getRewardTokensToDistribute(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    withdraw(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[]]>;

    writePosition(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        timestamp: BigNumber;
        epoch: BigNumber;
        strike: BigNumber;
        collateralAmount: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      strikeIndex: BigNumberish,
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEpochStrikes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardTokensToDistribute(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    writePosition(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      strikeIndex: BigNumberish,
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEpochStrikes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardTokensToDistribute(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    writePosition(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
