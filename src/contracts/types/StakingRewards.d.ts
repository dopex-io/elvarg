/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface StakingRewardsInterface extends ethers.utils.Interface {
  functions: {
    'addToContractWhitelist(address)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'boost()': FunctionFragment;
    'boostedFinish()': FunctionFragment;
    'boostedTimePeriod()': FunctionFragment;
    'compound()': FunctionFragment;
    'earned(address)': FunctionFragment;
    'exit()': FunctionFragment;
    'getReward(uint256)': FunctionFragment;
    'id()': FunctionFragment;
    'isContract(address)': FunctionFragment;
    'lastTimeRewardApplicable()': FunctionFragment;
    'lastUpdateTime()': FunctionFragment;
    'notifyRewardAmount(uint256,uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'periodFinish()': FunctionFragment;
    'removeFromContractWhitelist(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardPerToken()': FunctionFragment;
    'rewardPerTokenStoredDPX()': FunctionFragment;
    'rewardPerTokenStoredRDPX()': FunctionFragment;
    'rewardRateDPX()': FunctionFragment;
    'rewardRateRDPX()': FunctionFragment;
    'rewardsDPX(address)': FunctionFragment;
    'rewardsDistribution()': FunctionFragment;
    'rewardsDuration()': FunctionFragment;
    'rewardsRDPX(address)': FunctionFragment;
    'rewardsTokenDPX()': FunctionFragment;
    'rewardsTokenRDPX()': FunctionFragment;
    'stake(uint256)': FunctionFragment;
    'stakingToken()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'userDPXRewardPerTokenPaid(address)': FunctionFragment;
    'userRDPXRewardPerTokenPaid(address)': FunctionFragment;
    'whitelistedContracts(address)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
    'withdrawRewardTokens(uint256,uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'addToContractWhitelist',
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'boost', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'boostedFinish',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'boostedTimePeriod',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'compound', values?: undefined): string;
  encodeFunctionData(functionFragment: 'earned', values: [string]): string;
  encodeFunctionData(functionFragment: 'exit', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getReward',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'id', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isContract', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'lastTimeRewardApplicable',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'lastUpdateTime',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'notifyRewardAmount',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'periodFinish',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'removeFromContractWhitelist',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'rewardPerToken',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'rewardPerTokenStoredDPX',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'rewardPerTokenStoredRDPX',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'rewardRateDPX',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'rewardRateRDPX',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'rewardsDPX', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'rewardsDistribution',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'rewardsDuration',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'rewardsRDPX', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'rewardsTokenDPX',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'rewardsTokenRDPX',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'stake', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'stakingToken',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'userDPXRewardPerTokenPaid',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'userRDPXRewardPerTokenPaid',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'whitelistedContracts',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawRewardTokens',
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: 'addToContractWhitelist',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'boost', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'boostedFinish',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'boostedTimePeriod',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'compound', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'earned', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReward', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'id', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isContract', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'lastTimeRewardApplicable',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'lastUpdateTime',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'notifyRewardAmount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'periodFinish',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeFromContractWhitelist',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rewardPerToken',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rewardPerTokenStoredDPX',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rewardPerTokenStoredRDPX',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rewardRateDPX',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rewardRateRDPX',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'rewardsDPX', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'rewardsDistribution',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rewardsDuration',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rewardsRDPX',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rewardsTokenDPX',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rewardsTokenRDPX',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'stakingToken',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userDPXRewardPerTokenPaid',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userRDPXRewardPerTokenPaid',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'whitelistedContracts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawRewardTokens',
    data: BytesLike
  ): Result;

  events: {
    'AddToContractWhitelist(address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'RemoveFromContractWhitelist(address)': EventFragment;
    'RewardAdded(uint256,uint256)': EventFragment;
    'RewardCompounded(address,uint256)': EventFragment;
    'RewardPaid(address,uint256)': EventFragment;
    'RewardUpdated(uint256,uint256)': EventFragment;
    'Staked(address,uint256)': EventFragment;
    'Withdrawn(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddToContractWhitelist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'RemoveFromContractWhitelist'
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardCompounded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardPaid'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RewardUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Staked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdrawn'): EventFragment;
}

export type AddToContractWhitelistEvent = TypedEvent<
  [string] & { _contract: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RemoveFromContractWhitelistEvent = TypedEvent<
  [string] & { _contract: string }
>;

export type RewardAddedEvent = TypedEvent<
  [BigNumber, BigNumber] & { rewardDPX: BigNumber; rewardRDPX: BigNumber }
>;

export type RewardCompoundedEvent = TypedEvent<
  [string, BigNumber] & { user: string; rewardDPX: BigNumber }
>;

export type RewardPaidEvent = TypedEvent<
  [string, BigNumber] & { user: string; reward: BigNumber }
>;

export type RewardUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { rewardDPX: BigNumber; rewardRDPX: BigNumber }
>;

export type StakedEvent = TypedEvent<
  [string, BigNumber] & { user: string; amount: BigNumber }
>;

export type WithdrawnEvent = TypedEvent<
  [string, BigNumber] & { user: string; amount: BigNumber }
>;

export class StakingRewards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingRewardsInterface;

  functions: {
    addToContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    boost(overrides?: CallOverrides): Promise<[BigNumber]>;

    boostedFinish(overrides?: CallOverrides): Promise<[BigNumber]>;

    boostedTimePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    compound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        DPXtokensEarned: BigNumber;
        RDPXtokensEarned: BigNumber;
      }
    >;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReward(
      rewardsTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    id(overrides?: CallOverrides): Promise<[BigNumber]>;

    isContract(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    notifyRewardAmount(
      rewardDPX: BigNumberish,
      rewardRDPX: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    periodFinish(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    rewardPerTokenStoredDPX(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPerTokenStoredRDPX(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardRateDPX(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardRateRDPX(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsDPX(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsDistribution(overrides?: CallOverrides): Promise<[string]>;

    rewardsDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsRDPX(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsTokenDPX(overrides?: CallOverrides): Promise<[string]>;

    rewardsTokenRDPX(overrides?: CallOverrides): Promise<[string]>;

    stake(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userDPXRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userRDPXRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    whitelistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawRewardTokens(
      amountDPX: BigNumberish,
      amountRDPX: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addToContractWhitelist(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  boost(overrides?: CallOverrides): Promise<BigNumber>;

  boostedFinish(overrides?: CallOverrides): Promise<BigNumber>;

  boostedTimePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  compound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  earned(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      DPXtokensEarned: BigNumber;
      RDPXtokensEarned: BigNumber;
    }
  >;

  exit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReward(
    rewardsTokenID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  id(overrides?: CallOverrides): Promise<BigNumber>;

  isContract(addr: string, overrides?: CallOverrides): Promise<boolean>;

  lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  notifyRewardAmount(
    rewardDPX: BigNumberish,
    rewardRDPX: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

  removeFromContractWhitelist(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardPerToken(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  rewardPerTokenStoredDPX(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerTokenStoredRDPX(overrides?: CallOverrides): Promise<BigNumber>;

  rewardRateDPX(overrides?: CallOverrides): Promise<BigNumber>;

  rewardRateRDPX(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsDPX(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewardsDistribution(overrides?: CallOverrides): Promise<string>;

  rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsRDPX(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  rewardsTokenDPX(overrides?: CallOverrides): Promise<string>;

  rewardsTokenRDPX(overrides?: CallOverrides): Promise<string>;

  stake(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userDPXRewardPerTokenPaid(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userRDPXRewardPerTokenPaid(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  whitelistedContracts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawRewardTokens(
    amountDPX: BigNumberish,
    amountRDPX: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addToContractWhitelist(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    boost(overrides?: CallOverrides): Promise<BigNumber>;

    boostedFinish(overrides?: CallOverrides): Promise<BigNumber>;

    boostedTimePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    compound(overrides?: CallOverrides): Promise<void>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        DPXtokensEarned: BigNumber;
        RDPXtokensEarned: BigNumber;
      }
    >;

    exit(overrides?: CallOverrides): Promise<void>;

    getReward(
      rewardsTokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    isContract(addr: string, overrides?: CallOverrides): Promise<boolean>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      rewardDPX: BigNumberish,
      rewardRDPX: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardPerToken(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    rewardPerTokenStoredDPX(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStoredRDPX(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRateDPX(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRateRDPX(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDPX(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDistribution(overrides?: CallOverrides): Promise<string>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsRDPX(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardsTokenDPX(overrides?: CallOverrides): Promise<string>;

    rewardsTokenRDPX(overrides?: CallOverrides): Promise<string>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userDPXRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRDPXRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawRewardTokens(
      amountDPX: BigNumberish,
      amountRDPX: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  filters: {
    'AddToContractWhitelist(address)'(
      _contract?: string | null
    ): TypedEventFilter<[string], { _contract: string }>;

    AddToContractWhitelist(
      _contract?: string | null
    ): TypedEventFilter<[string], { _contract: string }>;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    'RemoveFromContractWhitelist(address)'(
      _contract?: string | null
    ): TypedEventFilter<[string], { _contract: string }>;

    RemoveFromContractWhitelist(
      _contract?: string | null
    ): TypedEventFilter<[string], { _contract: string }>;

    'RewardAdded(uint256,uint256)'(
      rewardDPX?: null,
      rewardRDPX?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { rewardDPX: BigNumber; rewardRDPX: BigNumber }
    >;

    RewardAdded(
      rewardDPX?: null,
      rewardRDPX?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { rewardDPX: BigNumber; rewardRDPX: BigNumber }
    >;

    'RewardCompounded(address,uint256)'(
      user?: string | null,
      rewardDPX?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; rewardDPX: BigNumber }
    >;

    RewardCompounded(
      user?: string | null,
      rewardDPX?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; rewardDPX: BigNumber }
    >;

    'RewardPaid(address,uint256)'(
      user?: string | null,
      reward?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; reward: BigNumber }
    >;

    RewardPaid(
      user?: string | null,
      reward?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; reward: BigNumber }
    >;

    'RewardUpdated(uint256,uint256)'(
      rewardDPX?: null,
      rewardRDPX?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { rewardDPX: BigNumber; rewardRDPX: BigNumber }
    >;

    RewardUpdated(
      rewardDPX?: null,
      rewardRDPX?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { rewardDPX: BigNumber; rewardRDPX: BigNumber }
    >;

    'Staked(address,uint256)'(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    Staked(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    'Withdrawn(address,uint256)'(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    Withdrawn(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    addToContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    boost(overrides?: CallOverrides): Promise<BigNumber>;

    boostedFinish(overrides?: CallOverrides): Promise<BigNumber>;

    boostedTimePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    compound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReward(
      rewardsTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    isContract(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      rewardDPX: BigNumberish,
      rewardRDPX: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStoredDPX(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStoredRDPX(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRateDPX(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRateRDPX(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDPX(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsRDPX(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardsTokenDPX(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsTokenRDPX(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userDPXRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRDPXRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawRewardTokens(
      amountDPX: BigNumberish,
      amountRDPX: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boostedFinish(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boostedTimePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    compound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReward(
      rewardsTokenID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isContract(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      rewardDPX: BigNumberish,
      rewardRDPX: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodFinish(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerTokenStoredDPX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerTokenStoredRDPX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardRateDPX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardRateRDPX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsDPX(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsDistribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsRDPX(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsTokenDPX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsTokenRDPX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userDPXRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRDPXRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRewardTokens(
      amountDPX: BigNumberish,
      amountRDPX: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
