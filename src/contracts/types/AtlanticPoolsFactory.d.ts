/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface AtlanticPoolsFactoryInterface extends ethers.utils.Interface {
  functions: {
    'atlanticPools(bytes32)': FunctionFragment;
    'atlanticPoolsList(uint256)': FunctionFragment;
    'createPool()': FunctionFragment;
    'getAtlanticPool(address,bool,uint8)': FunctionFragment;
    'getPoolKey(address,bool,uint8)': FunctionFragment;
    'massBootstrap(uint256[],address[])': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'atlanticPools',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'atlanticPoolsList',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'createPool',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getAtlanticPool',
    values: [string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getPoolKey',
    values: [string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'massBootstrap',
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: 'atlanticPools',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'atlanticPoolsList',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'createPool', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getAtlanticPool',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getPoolKey', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'massBootstrap',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;

  events: {
    'NewPoolDeployed(tuple,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'PoolBootstrapped(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'NewPoolDeployed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PoolBootstrapped'): EventFragment;
}

export type NewPoolDeployedEvent = TypedEvent<
  [
    [string, string, boolean, number] & {
      quoteToken: string;
      baseToken: string;
      isPut: boolean;
      expiryType: number;
    },
    string
  ] & {
    pool: [string, string, boolean, number] & {
      quoteToken: string;
      baseToken: string;
      isPut: boolean;
      expiryType: number;
    };
    arg1: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PoolBootstrappedEvent = TypedEvent<
  [string, string] & { arg0: string; expiries: string }
>;

export class AtlanticPoolsFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AtlanticPoolsFactoryInterface;

  functions: {
    atlanticPools(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    atlanticPoolsList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createPool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAtlanticPool(
      baseToken: string,
      isPut: boolean,
      expiryType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPoolKey(
      baseToken: string,
      isPut: boolean,
      expiryType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    massBootstrap(
      expiries: BigNumberish[],
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  atlanticPools(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  atlanticPoolsList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  createPool(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAtlanticPool(
    baseToken: string,
    isPut: boolean,
    expiryType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPoolKey(
    baseToken: string,
    isPut: boolean,
    expiryType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  massBootstrap(
    expiries: BigNumberish[],
    pools: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    atlanticPools(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    atlanticPoolsList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createPool(overrides?: CallOverrides): Promise<void>;

    getAtlanticPool(
      baseToken: string,
      isPut: boolean,
      expiryType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPoolKey(
      baseToken: string,
      isPut: boolean,
      expiryType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    massBootstrap(
      expiries: BigNumberish[],
      pools: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'NewPoolDeployed(tuple,address)'(
      pool?: null,
      undefined?: string | null
    ): TypedEventFilter<
      [
        [string, string, boolean, number] & {
          quoteToken: string;
          baseToken: string;
          isPut: boolean;
          expiryType: number;
        },
        string
      ],
      {
        pool: [string, string, boolean, number] & {
          quoteToken: string;
          baseToken: string;
          isPut: boolean;
          expiryType: number;
        };
        arg1: string;
      }
    >;

    NewPoolDeployed(
      pool?: null,
      undefined?: string | null
    ): TypedEventFilter<
      [
        [string, string, boolean, number] & {
          quoteToken: string;
          baseToken: string;
          isPut: boolean;
          expiryType: number;
        },
        string
      ],
      {
        pool: [string, string, boolean, number] & {
          quoteToken: string;
          baseToken: string;
          isPut: boolean;
          expiryType: number;
        };
        arg1: string;
      }
    >;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    'PoolBootstrapped(address,address)'(
      undefined?: string | null,
      expiries?: string | null
    ): TypedEventFilter<[string, string], { arg0: string; expiries: string }>;

    PoolBootstrapped(
      undefined?: string | null,
      expiries?: string | null
    ): TypedEventFilter<[string, string], { arg0: string; expiries: string }>;
  };

  estimateGas: {
    atlanticPools(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    atlanticPoolsList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAtlanticPool(
      baseToken: string,
      isPut: boolean,
      expiryType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolKey(
      baseToken: string,
      isPut: boolean,
      expiryType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massBootstrap(
      expiries: BigNumberish[],
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    atlanticPools(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    atlanticPoolsList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAtlanticPool(
      baseToken: string,
      isPut: boolean,
      expiryType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolKey(
      baseToken: string,
      isPut: boolean,
      expiryType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    massBootstrap(
      expiries: BigNumberish[],
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
