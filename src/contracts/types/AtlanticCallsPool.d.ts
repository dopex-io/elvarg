/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface AtlanticCallsPoolInterface extends ethers.utils.Interface {
  functions: {
    'addManagedContract(address)': FunctionFragment;
    'addToContractWhitelist(address)': FunctionFragment;
    'addresses()': FunctionFragment;
    'baseFundingRate()': FunctionFragment;
    'bootstrap(uint256)': FunctionFragment;
    'calculateFunding(uint256)': FunctionFragment;
    'calculatePnl(uint256,uint256,uint256)': FunctionFragment;
    'calculatePremium(uint256)': FunctionFragment;
    'calculatePurchaseFees(uint256)': FunctionFragment;
    'calculateSettlementFees(uint256,uint256,uint256)': FunctionFragment;
    'calculateStrikeFromOffset(uint256,uint256)': FunctionFragment;
    'calculateUnwindFees(uint256)': FunctionFragment;
    'checkpoints(uint256,uint256)': FunctionFragment;
    'checkpointsCount(uint256)': FunctionFragment;
    'clearOptionsWritten(uint256,uint256,uint256)': FunctionFragment;
    'collateralUtilizationWeight()': FunctionFragment;
    'currentEpoch()': FunctionFragment;
    'deposit(uint256,address)': FunctionFragment;
    'depositMultiple(uint256[],address)': FunctionFragment;
    'deposits(uint256,uint256)': FunctionFragment;
    'emergencyWithdraw(address[],bool)': FunctionFragment;
    'epochExpiryTimes(uint256)': FunctionFragment;
    'epochStartTimes(uint256)': FunctionFragment;
    'epochStrikeOffset(uint256)': FunctionFragment;
    'epochStrikeTokens(uint256)': FunctionFragment;
    'epochStrikes(uint256)': FunctionFragment;
    'epochStrikesWritten(uint256,uint256)': FunctionFragment;
    'expireDelayTolerance()': FunctionFragment;
    'expireEpoch()': FunctionFragment;
    'getEpochDepositBalance(uint256)': FunctionFragment;
    'getEpochDeposits(uint256)': FunctionFragment;
    'getFundingRate()': FunctionFragment;
    'getOptionTokenAddress(uint256)': FunctionFragment;
    'getUsdPrice()': FunctionFragment;
    'getUtilizationRate()': FunctionFragment;
    'getVolatility(uint256)': FunctionFragment;
    'isContract(address)': FunctionFragment;
    'isEpochExpired(uint256)': FunctionFragment;
    'isVaultReady(uint256)': FunctionFragment;
    'managedContracts(address)': FunctionFragment;
    'optionsTokenImplementation()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'purchase(uint256,address)': FunctionFragment;
    'putsWritten(uint256,uint256)': FunctionFragment;
    'relockCollateral(uint256,address)': FunctionFragment;
    'removeFromContractWhitelist(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setAddresses((address,address,address,address,address,address,address,address))': FunctionFragment;
    'setBaseFundingRate(uint256)': FunctionFragment;
    'setEpochStrikeOffset(uint256,uint256)': FunctionFragment;
    'setUnwindFeePercentage(uint256)': FunctionFragment;
    'setUtilizationWeight(uint256)': FunctionFragment;
    'settle(uint256,uint256,address)': FunctionFragment;
    'settlementPrices(uint256)': FunctionFragment;
    'totalActiveCollateral(uint256)': FunctionFragment;
    'totalPoolCollateral(uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unlockCollateral(uint256,address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'unwindFeePercentage()': FunctionFragment;
    'updateExpireDelayTolerance(uint256)': FunctionFragment;
    'userDepositsForStrikes(uint256,address,uint256)': FunctionFragment;
    'whitelistedContracts(address)': FunctionFragment;
    'withdraw(uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'addManagedContract',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'addToContractWhitelist',
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: 'addresses', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'baseFundingRate',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'bootstrap',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateFunding',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'calculatePnl',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'calculatePremium',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'calculatePurchaseFees',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateSettlementFees',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateStrikeFromOffset',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateUnwindFees',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'checkpoints',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'checkpointsCount',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'clearOptionsWritten',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'collateralUtilizationWeight',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'currentEpoch',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositMultiple',
    values: [BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: 'deposits',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'emergencyWithdraw',
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'epochExpiryTimes',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'epochStartTimes',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'epochStrikeOffset',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'epochStrikeTokens',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'epochStrikes',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'epochStrikesWritten',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'expireDelayTolerance',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'expireEpoch',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getEpochDepositBalance',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getEpochDeposits',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getFundingRate',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getOptionTokenAddress',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getUsdPrice',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getUtilizationRate',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getVolatility',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'isContract', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'isEpochExpired',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'isVaultReady',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'managedContracts',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'optionsTokenImplementation',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'purchase',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'putsWritten',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'relockCollateral',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeFromContractWhitelist',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setAddresses',
    values: [
      {
        quoteToken: string;
        baseToken: string;
        feeDistributor: string;
        feeStrategy: string;
        optionPricing: string;
        priceOracle: string;
        volatilityOracle: string;
        governance: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'setBaseFundingRate',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setEpochStrikeOffset',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setUnwindFeePercentage',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setUtilizationWeight',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'settle',
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'settlementPrices',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'totalActiveCollateral',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'totalPoolCollateral',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'unlockCollateral',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'unwindFeePercentage',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'updateExpireDelayTolerance',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'userDepositsForStrikes',
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'whitelistedContracts',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: 'addManagedContract',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'addToContractWhitelist',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'addresses', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'baseFundingRate',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'bootstrap', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'calculateFunding',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculatePnl',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculatePremium',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculatePurchaseFees',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculateSettlementFees',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculateStrikeFromOffset',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculateUnwindFees',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'checkpoints',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'checkpointsCount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'clearOptionsWritten',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'collateralUtilizationWeight',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'currentEpoch',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'depositMultiple',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'deposits', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'emergencyWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'epochExpiryTimes',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'epochStartTimes',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'epochStrikeOffset',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'epochStrikeTokens',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'epochStrikes',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'epochStrikesWritten',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'expireDelayTolerance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'expireEpoch',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getEpochDepositBalance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getEpochDeposits',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getFundingRate',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOptionTokenAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUsdPrice',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUtilizationRate',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getVolatility',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'isContract', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isEpochExpired',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isVaultReady',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'managedContracts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'optionsTokenImplementation',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchase', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'putsWritten',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'relockCollateral',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeFromContractWhitelist',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAddresses',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setBaseFundingRate',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setEpochStrikeOffset',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setUnwindFeePercentage',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setUtilizationWeight',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'settle', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'settlementPrices',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalActiveCollateral',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalPoolCollateral',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unlockCollateral',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'unwindFeePercentage',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateExpireDelayTolerance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userDepositsForStrikes',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'whitelistedContracts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'AddToContractWhitelist(address)': EventFragment;
    'Bootstrap(uint256,uint256)': EventFragment;
    'EmergencyWithdraw(address)': EventFragment;
    'EpochExpired(address,uint256)': EventFragment;
    'ExpireDelayToleranceUpdate(uint256)': EventFragment;
    'NewDeposit(uint256,uint256,address,address)': EventFragment;
    'NewMaxStrike(uint256)': EventFragment;
    'NewPurchase(uint256,uint256,uint256,uint256,uint256,address,address)': EventFragment;
    'NewSettle(uint256,uint256,address,uint256,uint256)': EventFragment;
    'NewStrikeOffset(uint256,uint256)': EventFragment;
    'NewWithdraw(uint256,uint256,address,uint256,uint256,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'RelockCollateral(uint256,uint256,uint256,address,address)': EventFragment;
    'RemoveFromContractWhitelist(address)': EventFragment;
    'UnlockCollateral(uint256,uint256,uint256,address,address)': EventFragment;
    'Unpaused(address)': EventFragment;
    'Unwind(uint256,uint256,uint256,uint256,uint256,address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddToContractWhitelist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Bootstrap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EpochExpired'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExpireDelayToleranceUpdate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewDeposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewMaxStrike'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewPurchase'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewSettle'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewStrikeOffset'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NewWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RelockCollateral'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'RemoveFromContractWhitelist'
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UnlockCollateral'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unwind'): EventFragment;
}

export type AddToContractWhitelistEvent = TypedEvent<
  [string] & { _contract: string }
>;

export type BootstrapEvent = TypedEvent<
  [BigNumber, BigNumber] & { epoch: BigNumber; newStrike: BigNumber }
>;

export type EmergencyWithdrawEvent = TypedEvent<[string] & { sender: string }>;

export type EpochExpiredEvent = TypedEvent<
  [string, BigNumber] & { sender: string; settlementPrice: BigNumber }
>;

export type ExpireDelayToleranceUpdateEvent = TypedEvent<
  [BigNumber] & { expireDelayTolerance: BigNumber }
>;

export type NewDepositEvent = TypedEvent<
  [BigNumber, BigNumber, string, string] & {
    epoch: BigNumber;
    amount: BigNumber;
    user: string;
    sender: string;
  }
>;

export type NewMaxStrikeEvent = TypedEvent<[BigNumber] & { strike: BigNumber }>;

export type NewPurchaseEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string, string] & {
    epoch: BigNumber;
    strike: BigNumber;
    amount: BigNumber;
    premium: BigNumber;
    fee: BigNumber;
    user: string;
    sender: string;
  }
>;

export type NewSettleEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber] & {
    epoch: BigNumber;
    strike: BigNumber;
    user: string;
    amount: BigNumber;
    pnl: BigNumber;
  }
>;

export type NewStrikeOffsetEvent = TypedEvent<
  [BigNumber, BigNumber] & { epoch: BigNumber; newStrikeOffset: BigNumber }
>;

export type NewWithdrawEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    epoch: BigNumber;
    strike: BigNumber;
    user: string;
    withdrawableAmount: BigNumber;
    funding: BigNumber;
    premium: BigNumber;
    underlying: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type RelockCollateralEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string] & {
    epoch: BigNumber;
    strike: BigNumber;
    amount: BigNumber;
    user: string;
    caller: string;
  }
>;

export type RemoveFromContractWhitelistEvent = TypedEvent<
  [string] & { _contract: string }
>;

export type UnlockCollateralEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string] & {
    epoch: BigNumber;
    strike: BigNumber;
    amount: BigNumber;
    user: string;
    caller: string;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type UnwindEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string, string] & {
    epoch: BigNumber;
    strike: BigNumber;
    amount: BigNumber;
    pnl: BigNumber;
    unwindFees: BigNumber;
    user: string;
    caller: string;
  }
>;

export class AtlanticCallsPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AtlanticCallsPoolInterface;

  functions: {
    addManagedContract(
      _managedContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addresses(overrides?: CallOverrides): Promise<
      [string, string, string, string, string, string, string, string] & {
        quoteToken: string;
        baseToken: string;
        feeDistributor: string;
        feeStrategy: string;
        optionPricing: string;
        priceOracle: string;
        volatilityOracle: string;
        governance: string;
      }
    >;

    baseFundingRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    bootstrap(
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateFunding(
      totalCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculatePnl(
      price: BigNumberish,
      strike: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculatePremium(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { premium: BigNumber }>;

    calculatePurchaseFees(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSettlementFees(
      settlementPrice: BigNumberish,
      pnl: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateStrikeFromOffset(
      strike: BigNumberish,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    calculateUnwindFees(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkpoints(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        deposits: BigNumber;
        depositBalance: BigNumber;
        unlockedCollateral: BigNumber;
        activeCollateral: BigNumber;
        premiumCollected: BigNumber;
        fundingCollected: BigNumber;
        premiumDistributionRatio: BigNumber;
        fundingDistributionRatio: BigNumber;
      }
    >;

    checkpointsCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    clearOptionsWritten(
      epoch: BigNumberish,
      strike: BigNumberish,
      optionsAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateralUtilizationWeight(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      liquidity: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositMultiple(
      amounts: BigNumberish[],
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposits(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        liquidity: BigNumber;
        timestamp: BigNumber;
        premiumDistributionRatio: BigNumber;
        fundingDistributionRatio: BigNumber;
        depositor: string;
      }
    >;

    emergencyWithdraw(
      tokens: string[],
      transferNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    epochExpiryTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochStartTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochStrikeOffset(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochStrikeTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    epochStrikes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochStrikesWritten(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    expireDelayTolerance(overrides?: CallOverrides): Promise<[BigNumber]>;

    'expireEpoch()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'expireEpoch(uint256)'(
      settlementPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEpochDepositBalance(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEpochDeposits(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFundingRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fundingRate: BigNumber }>;

    getOptionTokenAddress(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUsdPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUtilizationRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVolatility(
      _strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isContract(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isEpochExpired(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isVaultReady(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    managedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    optionsTokenImplementation(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    purchase(
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    putsWritten(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    relockCollateral(
      amount: BigNumberish,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      _addresses: {
        quoteToken: string;
        baseToken: string;
        feeDistributor: string;
        feeStrategy: string;
        optionPricing: string;
        priceOracle: string;
        volatilityOracle: string;
        governance: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseFundingRate(
      fundingRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEpochStrikeOffset(
      newOffset: BigNumberish,
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUnwindFeePercentage(
      unwindFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUtilizationWeight(
      utilizationWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settle(
      amount: BigNumberish,
      epoch: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settlementPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalActiveCollateral(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalPoolCollateral(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockCollateral(
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unwindFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateExpireDelayTolerance(
      _expireDelayTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userDepositsForStrikes(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    whitelistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdraw(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addManagedContract(
    _managedContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToContractWhitelist(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addresses(overrides?: CallOverrides): Promise<
    [string, string, string, string, string, string, string, string] & {
      quoteToken: string;
      baseToken: string;
      feeDistributor: string;
      feeStrategy: string;
      optionPricing: string;
      priceOracle: string;
      volatilityOracle: string;
      governance: string;
    }
  >;

  baseFundingRate(overrides?: CallOverrides): Promise<BigNumber>;

  bootstrap(
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateFunding(
    totalCollateral: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePnl(
    price: BigNumberish,
    strike: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePremium(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePurchaseFees(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSettlementFees(
    settlementPrice: BigNumberish,
    pnl: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateStrikeFromOffset(
    strike: BigNumberish,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateUnwindFees(
    underlyingAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkpoints(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      deposits: BigNumber;
      depositBalance: BigNumber;
      unlockedCollateral: BigNumber;
      activeCollateral: BigNumber;
      premiumCollected: BigNumber;
      fundingCollected: BigNumber;
      premiumDistributionRatio: BigNumber;
      fundingDistributionRatio: BigNumber;
    }
  >;

  checkpointsCount(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  clearOptionsWritten(
    epoch: BigNumberish,
    strike: BigNumberish,
    optionsAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateralUtilizationWeight(overrides?: CallOverrides): Promise<BigNumber>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    liquidity: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositMultiple(
    amounts: BigNumberish[],
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposits(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      liquidity: BigNumber;
      timestamp: BigNumber;
      premiumDistributionRatio: BigNumber;
      fundingDistributionRatio: BigNumber;
      depositor: string;
    }
  >;

  emergencyWithdraw(
    tokens: string[],
    transferNative: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  epochExpiryTimes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epochStartTimes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epochStrikeOffset(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epochStrikeTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  epochStrikes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epochStrikesWritten(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  expireDelayTolerance(overrides?: CallOverrides): Promise<BigNumber>;

  'expireEpoch()'(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'expireEpoch(uint256)'(
    settlementPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEpochDepositBalance(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEpochDeposits(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFundingRate(overrides?: CallOverrides): Promise<BigNumber>;

  getOptionTokenAddress(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getUsdPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>;

  getVolatility(
    _strike: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isContract(addr: string, overrides?: CallOverrides): Promise<boolean>;

  isEpochExpired(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVaultReady(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  managedContracts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  optionsTokenImplementation(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  purchase(
    amount: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  putsWritten(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  relockCollateral(
    amount: BigNumberish,
    borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeFromContractWhitelist(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    _addresses: {
      quoteToken: string;
      baseToken: string;
      feeDistributor: string;
      feeStrategy: string;
      optionPricing: string;
      priceOracle: string;
      volatilityOracle: string;
      governance: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseFundingRate(
    fundingRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEpochStrikeOffset(
    newOffset: BigNumberish,
    epoch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUnwindFeePercentage(
    unwindFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUtilizationWeight(
    utilizationWeight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settle(
    amount: BigNumberish,
    epoch: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settlementPrices(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalActiveCollateral(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalPoolCollateral(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockCollateral(
    amount: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unwindFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  updateExpireDelayTolerance(
    _expireDelayTolerance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userDepositsForStrikes(
    arg0: BigNumberish,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  whitelistedContracts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    epoch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addManagedContract(
      _managedContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addToContractWhitelist(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addresses(overrides?: CallOverrides): Promise<
      [string, string, string, string, string, string, string, string] & {
        quoteToken: string;
        baseToken: string;
        feeDistributor: string;
        feeStrategy: string;
        optionPricing: string;
        priceOracle: string;
        volatilityOracle: string;
        governance: string;
      }
    >;

    baseFundingRate(overrides?: CallOverrides): Promise<BigNumber>;

    bootstrap(expiry: BigNumberish, overrides?: CallOverrides): Promise<void>;

    calculateFunding(
      totalCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePnl(
      price: BigNumberish,
      strike: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePremium(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePurchaseFees(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSettlementFees(
      settlementPrice: BigNumberish,
      pnl: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateStrikeFromOffset(
      strike: BigNumberish,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateUnwindFees(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkpoints(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        deposits: BigNumber;
        depositBalance: BigNumber;
        unlockedCollateral: BigNumber;
        activeCollateral: BigNumber;
        premiumCollected: BigNumber;
        fundingCollected: BigNumber;
        premiumDistributionRatio: BigNumber;
        fundingDistributionRatio: BigNumber;
      }
    >;

    checkpointsCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearOptionsWritten(
      epoch: BigNumberish,
      strike: BigNumberish,
      optionsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collateralUtilizationWeight(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      liquidity: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositMultiple(
      amounts: BigNumberish[],
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deposits(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        liquidity: BigNumber;
        timestamp: BigNumber;
        premiumDistributionRatio: BigNumber;
        fundingDistributionRatio: BigNumber;
        depositor: string;
      }
    >;

    emergencyWithdraw(
      tokens: string[],
      transferNative: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    epochExpiryTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStartTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikeOffset(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikeTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    epochStrikes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikesWritten(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expireDelayTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    'expireEpoch()'(overrides?: CallOverrides): Promise<void>;

    'expireEpoch(uint256)'(
      settlementPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getEpochDepositBalance(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochDeposits(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingRate(overrides?: CallOverrides): Promise<BigNumber>;

    getOptionTokenAddress(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getUsdPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    getVolatility(
      _strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isContract(addr: string, overrides?: CallOverrides): Promise<boolean>;

    isEpochExpired(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVaultReady(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    managedContracts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    optionsTokenImplementation(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<boolean>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    purchase(
      amount: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    putsWritten(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relockCollateral(
      amount: BigNumberish,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAddresses(
      _addresses: {
        quoteToken: string;
        baseToken: string;
        feeDistributor: string;
        feeStrategy: string;
        optionPricing: string;
        priceOracle: string;
        volatilityOracle: string;
        governance: string;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    setBaseFundingRate(
      fundingRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEpochStrikeOffset(
      newOffset: BigNumberish,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnwindFeePercentage(
      unwindFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUtilizationWeight(
      utilizationWeight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(
      amount: BigNumberish,
      epoch: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settlementPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalActiveCollateral(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPoolCollateral(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockCollateral(
      amount: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<boolean>;

    unwindFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    updateExpireDelayTolerance(
      _expireDelayTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userDepositsForStrikes(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        userWithdrawableAmount: BigNumber;
        premium: BigNumber;
        funding: BigNumber;
        unwindsEarned: BigNumber;
      }
    >;
  };

  filters: {
    'AddToContractWhitelist(address)'(
      _contract?: string | null
    ): TypedEventFilter<[string], { _contract: string }>;

    AddToContractWhitelist(
      _contract?: string | null
    ): TypedEventFilter<[string], { _contract: string }>;

    'Bootstrap(uint256,uint256)'(
      epoch?: BigNumberish | null,
      newStrike?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { epoch: BigNumber; newStrike: BigNumber }
    >;

    Bootstrap(
      epoch?: BigNumberish | null,
      newStrike?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { epoch: BigNumber; newStrike: BigNumber }
    >;

    'EmergencyWithdraw(address)'(
      sender?: null
    ): TypedEventFilter<[string], { sender: string }>;

    EmergencyWithdraw(
      sender?: null
    ): TypedEventFilter<[string], { sender: string }>;

    'EpochExpired(address,uint256)'(
      sender?: null,
      settlementPrice?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; settlementPrice: BigNumber }
    >;

    EpochExpired(
      sender?: null,
      settlementPrice?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; settlementPrice: BigNumber }
    >;

    'ExpireDelayToleranceUpdate(uint256)'(
      expireDelayTolerance?: null
    ): TypedEventFilter<[BigNumber], { expireDelayTolerance: BigNumber }>;

    ExpireDelayToleranceUpdate(
      expireDelayTolerance?: null
    ): TypedEventFilter<[BigNumber], { expireDelayTolerance: BigNumber }>;

    'NewDeposit(uint256,uint256,address,address)'(
      epoch?: BigNumberish | null,
      amount?: null,
      user?: string | null,
      sender?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      { epoch: BigNumber; amount: BigNumber; user: string; sender: string }
    >;

    NewDeposit(
      epoch?: BigNumberish | null,
      amount?: null,
      user?: string | null,
      sender?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      { epoch: BigNumber; amount: BigNumber; user: string; sender: string }
    >;

    'NewMaxStrike(uint256)'(
      strike?: null
    ): TypedEventFilter<[BigNumber], { strike: BigNumber }>;

    NewMaxStrike(
      strike?: null
    ): TypedEventFilter<[BigNumber], { strike: BigNumber }>;

    'NewPurchase(uint256,uint256,uint256,uint256,uint256,address,address)'(
      epoch?: BigNumberish | null,
      strike?: BigNumberish | null,
      amount?: null,
      premium?: null,
      fee?: null,
      user?: string | null,
      sender?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string, string],
      {
        epoch: BigNumber;
        strike: BigNumber;
        amount: BigNumber;
        premium: BigNumber;
        fee: BigNumber;
        user: string;
        sender: string;
      }
    >;

    NewPurchase(
      epoch?: BigNumberish | null,
      strike?: BigNumberish | null,
      amount?: null,
      premium?: null,
      fee?: null,
      user?: string | null,
      sender?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string, string],
      {
        epoch: BigNumber;
        strike: BigNumber;
        amount: BigNumber;
        premium: BigNumber;
        fee: BigNumber;
        user: string;
        sender: string;
      }
    >;

    'NewSettle(uint256,uint256,address,uint256,uint256)'(
      epoch?: BigNumberish | null,
      strike?: BigNumberish | null,
      user?: string | null,
      amount?: null,
      pnl?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber, BigNumber],
      {
        epoch: BigNumber;
        strike: BigNumber;
        user: string;
        amount: BigNumber;
        pnl: BigNumber;
      }
    >;

    NewSettle(
      epoch?: BigNumberish | null,
      strike?: BigNumberish | null,
      user?: string | null,
      amount?: null,
      pnl?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber, BigNumber],
      {
        epoch: BigNumber;
        strike: BigNumber;
        user: string;
        amount: BigNumber;
        pnl: BigNumber;
      }
    >;

    'NewStrikeOffset(uint256,uint256)'(
      epoch?: BigNumberish | null,
      newStrikeOffset?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { epoch: BigNumber; newStrikeOffset: BigNumber }
    >;

    NewStrikeOffset(
      epoch?: BigNumberish | null,
      newStrikeOffset?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { epoch: BigNumber; newStrikeOffset: BigNumber }
    >;

    'NewWithdraw(uint256,uint256,address,uint256,uint256,uint256,uint256)'(
      epoch?: BigNumberish | null,
      strike?: BigNumberish | null,
      user?: string | null,
      withdrawableAmount?: null,
      funding?: null,
      premium?: null,
      underlying?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        epoch: BigNumber;
        strike: BigNumber;
        user: string;
        withdrawableAmount: BigNumber;
        funding: BigNumber;
        premium: BigNumber;
        underlying: BigNumber;
      }
    >;

    NewWithdraw(
      epoch?: BigNumberish | null,
      strike?: BigNumberish | null,
      user?: string | null,
      withdrawableAmount?: null,
      funding?: null,
      premium?: null,
      underlying?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        epoch: BigNumber;
        strike: BigNumber;
        user: string;
        withdrawableAmount: BigNumber;
        funding: BigNumber;
        premium: BigNumber;
        underlying: BigNumber;
      }
    >;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    'Paused(address)'(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    'RelockCollateral(uint256,uint256,uint256,address,address)'(
      epoch?: BigNumberish | null,
      strike?: BigNumberish | null,
      amount?: null,
      user?: string | null,
      caller?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, string],
      {
        epoch: BigNumber;
        strike: BigNumber;
        amount: BigNumber;
        user: string;
        caller: string;
      }
    >;

    RelockCollateral(
      epoch?: BigNumberish | null,
      strike?: BigNumberish | null,
      amount?: null,
      user?: string | null,
      caller?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, string],
      {
        epoch: BigNumber;
        strike: BigNumber;
        amount: BigNumber;
        user: string;
        caller: string;
      }
    >;

    'RemoveFromContractWhitelist(address)'(
      _contract?: string | null
    ): TypedEventFilter<[string], { _contract: string }>;

    RemoveFromContractWhitelist(
      _contract?: string | null
    ): TypedEventFilter<[string], { _contract: string }>;

    'UnlockCollateral(uint256,uint256,uint256,address,address)'(
      epoch?: BigNumberish | null,
      strike?: BigNumberish | null,
      amount?: null,
      user?: string | null,
      caller?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, string],
      {
        epoch: BigNumber;
        strike: BigNumber;
        amount: BigNumber;
        user: string;
        caller: string;
      }
    >;

    UnlockCollateral(
      epoch?: BigNumberish | null,
      strike?: BigNumberish | null,
      amount?: null,
      user?: string | null,
      caller?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, string],
      {
        epoch: BigNumber;
        strike: BigNumber;
        amount: BigNumber;
        user: string;
        caller: string;
      }
    >;

    'Unpaused(address)'(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    'Unwind(uint256,uint256,uint256,uint256,uint256,address,address)'(
      epoch?: BigNumberish | null,
      strike?: BigNumberish | null,
      amount?: null,
      pnl?: null,
      unwindFees?: null,
      user?: string | null,
      caller?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string, string],
      {
        epoch: BigNumber;
        strike: BigNumber;
        amount: BigNumber;
        pnl: BigNumber;
        unwindFees: BigNumber;
        user: string;
        caller: string;
      }
    >;

    Unwind(
      epoch?: BigNumberish | null,
      strike?: BigNumberish | null,
      amount?: null,
      pnl?: null,
      unwindFees?: null,
      user?: string | null,
      caller?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string, string],
      {
        epoch: BigNumber;
        strike: BigNumber;
        amount: BigNumber;
        pnl: BigNumber;
        unwindFees: BigNumber;
        user: string;
        caller: string;
      }
    >;
  };

  estimateGas: {
    addManagedContract(
      _managedContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addresses(overrides?: CallOverrides): Promise<BigNumber>;

    baseFundingRate(overrides?: CallOverrides): Promise<BigNumber>;

    bootstrap(
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateFunding(
      totalCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePnl(
      price: BigNumberish,
      strike: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePremium(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePurchaseFees(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSettlementFees(
      settlementPrice: BigNumberish,
      pnl: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateStrikeFromOffset(
      strike: BigNumberish,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateUnwindFees(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkpoints(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkpointsCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearOptionsWritten(
      epoch: BigNumberish,
      strike: BigNumberish,
      optionsAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateralUtilizationWeight(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      liquidity: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositMultiple(
      amounts: BigNumberish[],
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposits(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyWithdraw(
      tokens: string[],
      transferNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    epochExpiryTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStartTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikeOffset(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikeTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikesWritten(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expireDelayTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    'expireEpoch()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'expireEpoch(uint256)'(
      settlementPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEpochDepositBalance(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochDeposits(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingRate(overrides?: CallOverrides): Promise<BigNumber>;

    getOptionTokenAddress(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsdPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getUtilizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    getVolatility(
      _strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isContract(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isEpochExpired(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVaultReady(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    managedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optionsTokenImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    purchase(
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    putsWritten(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    relockCollateral(
      amount: BigNumberish,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAddresses(
      _addresses: {
        quoteToken: string;
        baseToken: string;
        feeDistributor: string;
        feeStrategy: string;
        optionPricing: string;
        priceOracle: string;
        volatilityOracle: string;
        governance: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseFundingRate(
      fundingRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEpochStrikeOffset(
      newOffset: BigNumberish,
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUnwindFeePercentage(
      unwindFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUtilizationWeight(
      utilizationWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settle(
      amount: BigNumberish,
      epoch: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settlementPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalActiveCollateral(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPoolCollateral(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockCollateral(
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unwindFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    updateExpireDelayTolerance(
      _expireDelayTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userDepositsForStrikes(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addManagedContract(
      _managedContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseFundingRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bootstrap(
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateFunding(
      totalCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePnl(
      price: BigNumberish,
      strike: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePremium(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePurchaseFees(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSettlementFees(
      settlementPrice: BigNumberish,
      pnl: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateStrikeFromOffset(
      strike: BigNumberish,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateUnwindFees(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkpoints(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkpointsCount(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearOptionsWritten(
      epoch: BigNumberish,
      strike: BigNumberish,
      optionsAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateralUtilizationWeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      liquidity: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositMultiple(
      amounts: BigNumberish[],
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      tokens: string[],
      transferNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    epochExpiryTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochStartTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochStrikeOffset(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochStrikeTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochStrikes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochStrikesWritten(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expireDelayTolerance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'expireEpoch()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'expireEpoch(uint256)'(
      settlementPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEpochDepositBalance(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochDeposits(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundingRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOptionTokenAddress(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUsdPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUtilizationRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVolatility(
      _strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isContract(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEpochExpired(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVaultReady(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    managedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionsTokenImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchase(
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    putsWritten(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relockCollateral(
      amount: BigNumberish,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      _addresses: {
        quoteToken: string;
        baseToken: string;
        feeDistributor: string;
        feeStrategy: string;
        optionPricing: string;
        priceOracle: string;
        volatilityOracle: string;
        governance: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseFundingRate(
      fundingRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEpochStrikeOffset(
      newOffset: BigNumberish,
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUnwindFeePercentage(
      unwindFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUtilizationWeight(
      utilizationWeight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      amount: BigNumberish,
      epoch: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settlementPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalActiveCollateral(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPoolCollateral(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockCollateral(
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unwindFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateExpireDelayTolerance(
      _expireDelayTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userDepositsForStrikes(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
