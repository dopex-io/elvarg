/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface IAtlanticPoolInterface extends ethers.utils.Interface {
  functions: {
    'addresses()': FunctionFragment;
    'bootstrap(uint256)': FunctionFragment;
    'calculateFunding(uint256)': FunctionFragment;
    'calculatePnl(uint256,uint256,uint256)': FunctionFragment;
    'calculatePremium(uint256,uint256)': FunctionFragment;
    'calculatePurchaseFees(uint256,uint256)': FunctionFragment;
    'calculateUnwindFees(uint256,uint256,address)': FunctionFragment;
    'clearOptionsWritten(uint256,uint256,uint256,uint256,address)': FunctionFragment;
    'currentEpoch()': FunctionFragment;
    'deposit(uint256,address)': FunctionFragment;
    'depositFunding(uint256,uint256,address)': FunctionFragment;
    'epochExpiryTimes(uint256)': FunctionFragment;
    'epochStrikeTokens(uint256,uint256)': FunctionFragment;
    'epochStrikes(uint256)': FunctionFragment;
    'getOptionTokenAddress(uint256)': FunctionFragment;
    'onRefund(uint256)': FunctionFragment;
    'purchase(uint256,address)': FunctionFragment;
    'relockCollateral(uint256,uint256,address)': FunctionFragment;
    'settle(uint256,uint256,address)': FunctionFragment;
    'tickSize()': FunctionFragment;
    'unlockCollateral(uint256,address)': FunctionFragment;
    'unwind(uint256,address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'addresses', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'bootstrap',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateFunding',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'calculatePnl',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'calculatePremium',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'calculatePurchaseFees',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateUnwindFees',
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'clearOptionsWritten',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'currentEpoch',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositFunding',
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'epochExpiryTimes',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'epochStrikeTokens',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'epochStrikes',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getOptionTokenAddress',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'onRefund',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'purchase',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'relockCollateral',
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'settle',
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: 'tickSize', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'unlockCollateral',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'unwind',
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: 'addresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bootstrap', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'calculateFunding',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculatePnl',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculatePremium',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculatePurchaseFees',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculateUnwindFees',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'clearOptionsWritten',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'currentEpoch',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'depositFunding',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'epochExpiryTimes',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'epochStrikeTokens',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'epochStrikes',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOptionTokenAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'onRefund', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchase', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'relockCollateral',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'settle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tickSize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'unlockCollateral',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'unwind', data: BytesLike): Result;

  events: {};
}

export class IAtlanticPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAtlanticPoolInterface;

  functions: {
    addresses(overrides?: CallOverrides): Promise<
      [
        [string, string, string, string, string, string, string, string] & {
          quoteToken: string;
          baseToken: string;
          feeDistributor: string;
          feeStrategy: string;
          optionPricing: string;
          priceOracle: string;
          volatilityOracle: string;
          governance: string;
        }
      ]
    >;

    bootstrap(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'calculateFunding(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    'calculateFunding(uint256,uint256)'(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculatePnl(
      price: BigNumberish,
      strike: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'calculatePremium(uint256,uint256)'(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    'calculatePremium(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    'calculatePurchaseFees(uint256,uint256)'(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    'calculatePurchaseFees(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    'calculateUnwindFees(uint256,uint256,address)'(
      underlyingAmount: BigNumberish,
      maxStrikeCollateralIndex: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    'calculateUnwindFees(uint256)'(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    'clearOptionsWritten(uint256,uint256,uint256,uint256,address)'(
      epoch: BigNumberish,
      optionStrike: BigNumberish,
      maxStrikesCollateralIndex: BigNumberish,
      optionsAmount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'clearOptionsWritten(uint256,uint256,uint256)'(
      epoch: BigNumberish,
      strike: BigNumberish,
      optionsAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      maxStrike: BigNumberish,
      user: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'depositFunding(uint256,uint256,address)'(
      strike: BigNumberish,
      amount: BigNumberish,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'depositFunding(uint256,address)'(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    epochExpiryTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochStrikeTokens(
      epoch: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    epochStrikes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    'getOptionTokenAddress(uint256)'(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    'getOptionTokenAddress(uint256,uint256)'(
      maxStrike: BigNumberish,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onRefund(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    'purchase(uint256,address)'(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'purchase(uint256,uint256,address)'(
      strike: BigNumberish,
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'relockCollateral(uint256,uint256,address)'(
      collateral: BigNumberish,
      index: BigNumberish,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'relockCollateral(uint256,address)'(
      amount: BigNumberish,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settle(
      amount: BigNumberish,
      epoch: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tickSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    'unlockCollateral(uint256,address)'(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'unlockCollateral(uint256,uint256,address,address)'(
      requiredCollateral: BigNumberish,
      index: BigNumberish,
      user: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'unwind(uint256,address)'(
      optionsAmount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'unwind(uint256,uint256,uint256,address)'(
      optionStrike: BigNumberish,
      underlyingAmount: BigNumberish,
      maxStrikesCollateralIndex: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addresses(overrides?: CallOverrides): Promise<
    [string, string, string, string, string, string, string, string] & {
      quoteToken: string;
      baseToken: string;
      feeDistributor: string;
      feeStrategy: string;
      optionPricing: string;
      priceOracle: string;
      volatilityOracle: string;
      governance: string;
    }
  >;

  bootstrap(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'calculateFunding(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'calculateFunding(uint256,uint256)'(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePnl(
    price: BigNumberish,
    strike: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'calculatePremium(uint256,uint256)'(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'calculatePremium(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'calculatePurchaseFees(uint256,uint256)'(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'calculatePurchaseFees(uint256)'(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'calculateUnwindFees(uint256,uint256,address)'(
    underlyingAmount: BigNumberish,
    maxStrikeCollateralIndex: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'calculateUnwindFees(uint256)'(
    underlyingAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'clearOptionsWritten(uint256,uint256,uint256,uint256,address)'(
    epoch: BigNumberish,
    optionStrike: BigNumberish,
    maxStrikesCollateralIndex: BigNumberish,
    optionsAmount: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'clearOptionsWritten(uint256,uint256,uint256)'(
    epoch: BigNumberish,
    strike: BigNumberish,
    optionsAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    maxStrike: BigNumberish,
    user: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'depositFunding(uint256,uint256,address)'(
    strike: BigNumberish,
    amount: BigNumberish,
    arg2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'depositFunding(uint256,address)'(
    arg0: BigNumberish,
    arg1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  epochExpiryTimes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epochStrikeTokens(
    epoch: BigNumberish,
    strike: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  epochStrikes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  'getOptionTokenAddress(uint256)'(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  'getOptionTokenAddress(uint256,uint256)'(
    maxStrike: BigNumberish,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  onRefund(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'purchase(uint256,address)'(
    arg0: BigNumberish,
    arg1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'purchase(uint256,uint256,address)'(
    strike: BigNumberish,
    amount: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'relockCollateral(uint256,uint256,address)'(
    collateral: BigNumberish,
    index: BigNumberish,
    borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'relockCollateral(uint256,address)'(
    amount: BigNumberish,
    borrower: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settle(
    amount: BigNumberish,
    epoch: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tickSize(overrides?: CallOverrides): Promise<BigNumber>;

  'unlockCollateral(uint256,address)'(
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'unlockCollateral(uint256,uint256,address,address)'(
    requiredCollateral: BigNumberish,
    index: BigNumberish,
    user: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'unwind(uint256,address)'(
    optionsAmount: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'unwind(uint256,uint256,uint256,address)'(
    optionStrike: BigNumberish,
    underlyingAmount: BigNumberish,
    maxStrikesCollateralIndex: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addresses(overrides?: CallOverrides): Promise<
      [string, string, string, string, string, string, string, string] & {
        quoteToken: string;
        baseToken: string;
        feeDistributor: string;
        feeStrategy: string;
        optionPricing: string;
        priceOracle: string;
        volatilityOracle: string;
        governance: string;
      }
    >;

    bootstrap(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'calculateFunding(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculateFunding(uint256,uint256)'(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePnl(
      price: BigNumberish,
      strike: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculatePremium(uint256,uint256)'(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculatePremium(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculatePurchaseFees(uint256,uint256)'(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculatePurchaseFees(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculateUnwindFees(uint256,uint256,address)'(
      underlyingAmount: BigNumberish,
      maxStrikeCollateralIndex: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculateUnwindFees(uint256)'(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'clearOptionsWritten(uint256,uint256,uint256,uint256,address)'(
      epoch: BigNumberish,
      optionStrike: BigNumberish,
      maxStrikesCollateralIndex: BigNumberish,
      optionsAmount: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'clearOptionsWritten(uint256,uint256,uint256)'(
      epoch: BigNumberish,
      strike: BigNumberish,
      optionsAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      maxStrike: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'depositFunding(uint256,uint256,address)'(
      strike: BigNumberish,
      amount: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'depositFunding(uint256,address)'(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochExpiryTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikeTokens(
      epoch: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    epochStrikes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getOptionTokenAddress(uint256)'(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    'getOptionTokenAddress(uint256,uint256)'(
      maxStrike: BigNumberish,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    onRefund(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'purchase(uint256,address)'(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'purchase(uint256,uint256,address)'(
      strike: BigNumberish,
      amount: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    'relockCollateral(uint256,uint256,address)'(
      collateral: BigNumberish,
      index: BigNumberish,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'relockCollateral(uint256,address)'(
      amount: BigNumberish,
      borrower: string,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(
      amount: BigNumberish,
      epoch: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tickSize(overrides?: CallOverrides): Promise<BigNumber>;

    'unlockCollateral(uint256,address)'(
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'unlockCollateral(uint256,uint256,address,address)'(
      requiredCollateral: BigNumberish,
      index: BigNumberish,
      user: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    'unwind(uint256,address)'(
      optionsAmount: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    'unwind(uint256,uint256,uint256,address)'(
      optionStrike: BigNumberish,
      underlyingAmount: BigNumberish,
      maxStrikesCollateralIndex: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addresses(overrides?: CallOverrides): Promise<BigNumber>;

    bootstrap(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'calculateFunding(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculateFunding(uint256,uint256)'(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePnl(
      price: BigNumberish,
      strike: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'calculatePremium(uint256,uint256)'(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculatePremium(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculatePurchaseFees(uint256,uint256)'(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculatePurchaseFees(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculateUnwindFees(uint256,uint256,address)'(
      underlyingAmount: BigNumberish,
      maxStrikeCollateralIndex: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'calculateUnwindFees(uint256)'(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'clearOptionsWritten(uint256,uint256,uint256,uint256,address)'(
      epoch: BigNumberish,
      optionStrike: BigNumberish,
      maxStrikesCollateralIndex: BigNumberish,
      optionsAmount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'clearOptionsWritten(uint256,uint256,uint256)'(
      epoch: BigNumberish,
      strike: BigNumberish,
      optionsAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      maxStrike: BigNumberish,
      user: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'depositFunding(uint256,uint256,address)'(
      strike: BigNumberish,
      amount: BigNumberish,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'depositFunding(uint256,address)'(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    epochExpiryTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikeTokens(
      epoch: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getOptionTokenAddress(uint256)'(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    'getOptionTokenAddress(uint256,uint256)'(
      maxStrike: BigNumberish,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onRefund(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'purchase(uint256,address)'(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'purchase(uint256,uint256,address)'(
      strike: BigNumberish,
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'relockCollateral(uint256,uint256,address)'(
      collateral: BigNumberish,
      index: BigNumberish,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'relockCollateral(uint256,address)'(
      amount: BigNumberish,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settle(
      amount: BigNumberish,
      epoch: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tickSize(overrides?: CallOverrides): Promise<BigNumber>;

    'unlockCollateral(uint256,address)'(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'unlockCollateral(uint256,uint256,address,address)'(
      requiredCollateral: BigNumberish,
      index: BigNumberish,
      user: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'unwind(uint256,address)'(
      optionsAmount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'unwind(uint256,uint256,uint256,address)'(
      optionStrike: BigNumberish,
      underlyingAmount: BigNumberish,
      maxStrikesCollateralIndex: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bootstrap(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'calculateFunding(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'calculateFunding(uint256,uint256)'(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePnl(
      price: BigNumberish,
      strike: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'calculatePremium(uint256,uint256)'(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'calculatePremium(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'calculatePurchaseFees(uint256,uint256)'(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'calculatePurchaseFees(uint256)'(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'calculateUnwindFees(uint256,uint256,address)'(
      underlyingAmount: BigNumberish,
      maxStrikeCollateralIndex: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'calculateUnwindFees(uint256)'(
      underlyingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'clearOptionsWritten(uint256,uint256,uint256,uint256,address)'(
      epoch: BigNumberish,
      optionStrike: BigNumberish,
      maxStrikesCollateralIndex: BigNumberish,
      optionsAmount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'clearOptionsWritten(uint256,uint256,uint256)'(
      epoch: BigNumberish,
      strike: BigNumberish,
      optionsAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      maxStrike: BigNumberish,
      user: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'depositFunding(uint256,uint256,address)'(
      strike: BigNumberish,
      amount: BigNumberish,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'depositFunding(uint256,address)'(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    epochExpiryTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochStrikeTokens(
      epoch: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochStrikes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getOptionTokenAddress(uint256)'(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'getOptionTokenAddress(uint256,uint256)'(
      maxStrike: BigNumberish,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onRefund(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'purchase(uint256,address)'(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'purchase(uint256,uint256,address)'(
      strike: BigNumberish,
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'relockCollateral(uint256,uint256,address)'(
      collateral: BigNumberish,
      index: BigNumberish,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'relockCollateral(uint256,address)'(
      amount: BigNumberish,
      borrower: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      amount: BigNumberish,
      epoch: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tickSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'unlockCollateral(uint256,address)'(
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'unlockCollateral(uint256,uint256,address,address)'(
      requiredCollateral: BigNumberish,
      index: BigNumberish,
      user: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'unwind(uint256,address)'(
      optionsAmount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'unwind(uint256,uint256,uint256,address)'(
      optionStrike: BigNumberish,
      underlyingAmount: BigNumberish,
      maxStrikesCollateralIndex: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
