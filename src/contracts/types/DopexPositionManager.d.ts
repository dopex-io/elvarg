/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface DopexPositionManagerInterface extends ethers.utils.Interface {
  functions: {
    'decreaseOrder(address[],address,address,uint256,uint256,bool)': FunctionFragment;
    'enableAndCreateIncreaseOrder((address[],address,uint256,uint256,uint256,bytes32,bool),address,address,address,address)': FunctionFragment;
    'gmxPositionRouter()': FunctionFragment;
    'gmxRouter()': FunctionFragment;
    'gmxVault()': FunctionFragment;
    'increaseOrder(address[],address,uint256,uint256)': FunctionFragment;
    'isEnabled()': FunctionFragment;
    'minFee()': FunctionFragment;
    'referralCode()': FunctionFragment;
    'release()': FunctionFragment;
    'released()': FunctionFragment;
    'setMinFee(uint256)': FunctionFragment;
    'setReferralCode(bytes32)': FunctionFragment;
    'strategyController()': FunctionFragment;
    'user()': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'decreaseOrder',
    values: [string[], string, string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'enableAndCreateIncreaseOrder',
    values: [
      {
        path: string[];
        indexToken: string;
        positionCollateralSize: BigNumberish;
        positionSize: BigNumberish;
        executionFee: BigNumberish;
        referralCode: BytesLike;
        isCollateralOptionToken: boolean;
      },
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'gmxPositionRouter',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'gmxRouter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'gmxVault', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'increaseOrder',
    values: [string[], string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'isEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'minFee', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'referralCode',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'release', values?: undefined): string;
  encodeFunctionData(functionFragment: 'released', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'setMinFee',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'setReferralCode',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'strategyController',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'user', values?: undefined): string;

  decodeFunctionResult(
    functionFragment: 'decreaseOrder',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'enableAndCreateIncreaseOrder',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'gmxPositionRouter',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'gmxRouter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'gmxVault', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'increaseOrder',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'isEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minFee', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'referralCode',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'release', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'released', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinFee', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setReferralCode',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'strategyController',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'user', data: BytesLike): Result;

  events: {};
}

export class DopexPositionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DopexPositionManagerInterface;

  functions: {
    decreaseOrder(
      path: string[],
      indexToken: string,
      receiver: string,
      collateralDelta: BigNumberish,
      positionSizeDelta: BigNumberish,
      withdrawETH: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableAndCreateIncreaseOrder(
      params: {
        path: string[];
        indexToken: string;
        positionCollateralSize: BigNumberish;
        positionSize: BigNumberish;
        executionFee: BigNumberish;
        referralCode: BytesLike;
        isCollateralOptionToken: boolean;
      },
      _gmxVault: string,
      _gmxRouter: string,
      _gmxPositionRouter: string,
      _user: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gmxPositionRouter(overrides?: CallOverrides): Promise<[string]>;

    gmxRouter(overrides?: CallOverrides): Promise<[string]>;

    gmxVault(overrides?: CallOverrides): Promise<[string]>;

    increaseOrder(
      path: string[],
      indexToken: string,
      collateralDelta: BigNumberish,
      positionSizeDelta: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    minFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    referralCode(overrides?: CallOverrides): Promise<[string]>;

    release(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    released(overrides?: CallOverrides): Promise<[boolean]>;

    setMinFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReferralCode(
      newReferralCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategyController(overrides?: CallOverrides): Promise<[string]>;

    user(overrides?: CallOverrides): Promise<[string]>;
  };

  decreaseOrder(
    path: string[],
    indexToken: string,
    receiver: string,
    collateralDelta: BigNumberish,
    positionSizeDelta: BigNumberish,
    withdrawETH: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableAndCreateIncreaseOrder(
    params: {
      path: string[];
      indexToken: string;
      positionCollateralSize: BigNumberish;
      positionSize: BigNumberish;
      executionFee: BigNumberish;
      referralCode: BytesLike;
      isCollateralOptionToken: boolean;
    },
    _gmxVault: string,
    _gmxRouter: string,
    _gmxPositionRouter: string,
    _user: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gmxPositionRouter(overrides?: CallOverrides): Promise<string>;

  gmxRouter(overrides?: CallOverrides): Promise<string>;

  gmxVault(overrides?: CallOverrides): Promise<string>;

  increaseOrder(
    path: string[],
    indexToken: string,
    collateralDelta: BigNumberish,
    positionSizeDelta: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isEnabled(overrides?: CallOverrides): Promise<boolean>;

  minFee(overrides?: CallOverrides): Promise<BigNumber>;

  referralCode(overrides?: CallOverrides): Promise<string>;

  release(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  released(overrides?: CallOverrides): Promise<boolean>;

  setMinFee(
    newFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReferralCode(
    newReferralCode: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategyController(overrides?: CallOverrides): Promise<string>;

  user(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    decreaseOrder(
      path: string[],
      indexToken: string,
      receiver: string,
      collateralDelta: BigNumberish,
      positionSizeDelta: BigNumberish,
      withdrawETH: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    enableAndCreateIncreaseOrder(
      params: {
        path: string[];
        indexToken: string;
        positionCollateralSize: BigNumberish;
        positionSize: BigNumberish;
        executionFee: BigNumberish;
        referralCode: BytesLike;
        isCollateralOptionToken: boolean;
      },
      _gmxVault: string,
      _gmxRouter: string,
      _gmxPositionRouter: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    gmxPositionRouter(overrides?: CallOverrides): Promise<string>;

    gmxRouter(overrides?: CallOverrides): Promise<string>;

    gmxVault(overrides?: CallOverrides): Promise<string>;

    increaseOrder(
      path: string[],
      indexToken: string,
      collateralDelta: BigNumberish,
      positionSizeDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isEnabled(overrides?: CallOverrides): Promise<boolean>;

    minFee(overrides?: CallOverrides): Promise<BigNumber>;

    referralCode(overrides?: CallOverrides): Promise<string>;

    release(overrides?: CallOverrides): Promise<void>;

    released(overrides?: CallOverrides): Promise<boolean>;

    setMinFee(newFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setReferralCode(
      newReferralCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    strategyController(overrides?: CallOverrides): Promise<string>;

    user(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    decreaseOrder(
      path: string[],
      indexToken: string,
      receiver: string,
      collateralDelta: BigNumberish,
      positionSizeDelta: BigNumberish,
      withdrawETH: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableAndCreateIncreaseOrder(
      params: {
        path: string[];
        indexToken: string;
        positionCollateralSize: BigNumberish;
        positionSize: BigNumberish;
        executionFee: BigNumberish;
        referralCode: BytesLike;
        isCollateralOptionToken: boolean;
      },
      _gmxVault: string,
      _gmxRouter: string,
      _gmxPositionRouter: string,
      _user: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gmxPositionRouter(overrides?: CallOverrides): Promise<BigNumber>;

    gmxRouter(overrides?: CallOverrides): Promise<BigNumber>;

    gmxVault(overrides?: CallOverrides): Promise<BigNumber>;

    increaseOrder(
      path: string[],
      indexToken: string,
      collateralDelta: BigNumberish,
      positionSizeDelta: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    minFee(overrides?: CallOverrides): Promise<BigNumber>;

    referralCode(overrides?: CallOverrides): Promise<BigNumber>;

    release(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    released(overrides?: CallOverrides): Promise<BigNumber>;

    setMinFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReferralCode(
      newReferralCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategyController(overrides?: CallOverrides): Promise<BigNumber>;

    user(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    decreaseOrder(
      path: string[],
      indexToken: string,
      receiver: string,
      collateralDelta: BigNumberish,
      positionSizeDelta: BigNumberish,
      withdrawETH: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableAndCreateIncreaseOrder(
      params: {
        path: string[];
        indexToken: string;
        positionCollateralSize: BigNumberish;
        positionSize: BigNumberish;
        executionFee: BigNumberish;
        referralCode: BytesLike;
        isCollateralOptionToken: boolean;
      },
      _gmxVault: string,
      _gmxRouter: string,
      _gmxPositionRouter: string,
      _user: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gmxPositionRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmxRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmxVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseOrder(
      path: string[],
      indexToken: string,
      collateralDelta: BigNumberish,
      positionSizeDelta: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralCode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    release(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    released(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMinFee(
      newFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReferralCode(
      newReferralCode: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategyController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    user(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
