/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from 'ethers';
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from '@nomiclabs/hardhat-ethers/types';

import * as Contracts from '.';

declare module 'hardhat/types/runtime' {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: 'AccessControlEnumerableUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: 'AccessControlUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: 'IAccessControlEnumerableUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: 'IAccessControlUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: 'PausableUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: 'ERC20Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: 'ERC20BurnableUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20BurnableUpgradeable__factory>;
    getContractFactory(
      name: 'ERC20PausableUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PausableUpgradeable__factory>;
    getContractFactory(
      name: 'IERC20MetadataUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: 'IERC20Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: 'ERC20PresetMinterPauserUpgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PresetMinterPauserUpgradeable__factory>;
    getContractFactory(
      name: 'ERC165Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: 'IERC165Upgradeable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: 'AccessControl',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: 'AccessControlEnumerable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable__factory>;
    getContractFactory(
      name: 'IAccessControl',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: 'IAccessControlEnumerable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: 'Ownable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: 'Pausable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: 'ERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: 'ERC20Burnable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: 'ERC20Pausable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Pausable__factory>;
    getContractFactory(
      name: 'IERC20Metadata',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: 'IERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: 'ERC20PresetMinterPauser',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PresetMinterPauser__factory>;
    getContractFactory(
      name: 'ERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: 'IERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: 'AtlanticCallsPool',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AtlanticCallsPool__factory>;
    getContractFactory(
      name: 'IPriceOracle',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracle__factory>;
    getContractFactory(
      name: 'IVolatilityOracle',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVolatilityOracle__factory>;
    getContractFactory(
      name: 'AtlanticPoolsFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AtlanticPoolsFactory__factory>;
    getContractFactory(
      name: 'AtlanticPutsPool',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AtlanticPutsPool__factory>;
    getContractFactory(
      name: 'IPriceOracle',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracle__factory>;
    getContractFactory(
      name: 'IVolatilityOracle',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVolatilityOracle__factory>;
    getContractFactory(
      name: 'Governable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Governable__factory>;
    getContractFactory(
      name: 'IAdmin',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAdmin__factory>;
    getContractFactory(
      name: 'TokenManager',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenManager__factory>;
    getContractFactory(
      name: 'IPancakeFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeFactory__factory>;
    getContractFactory(
      name: 'IPancakePair',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakePair__factory>;
    getContractFactory(
      name: 'IPancakeRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPancakeRouter__factory>;
    getContractFactory(
      name: 'PancakeFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakeFactory__factory>;
    getContractFactory(
      name: 'PancakePair',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakePair__factory>;
    getContractFactory(
      name: 'PancakeRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PancakeRouter__factory>;
    getContractFactory(
      name: 'UniFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniFactory__factory>;
    getContractFactory(
      name: 'UniNftManager',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniNftManager__factory>;
    getContractFactory(
      name: 'UniPool',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniPool__factory>;
    getContractFactory(
      name: 'BasePositionManager',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasePositionManager__factory>;
    getContractFactory(
      name: 'GlpManager',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GlpManager__factory>;
    getContractFactory(
      name: 'IBasePositionManager',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBasePositionManager__factory>;
    getContractFactory(
      name: 'IGlpManager',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGlpManager__factory>;
    getContractFactory(
      name: 'IOrderBook',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOrderBook__factory>;
    getContractFactory(
      name: 'IPositionRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPositionRouter__factory>;
    getContractFactory(
      name: 'IRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRouter__factory>;
    getContractFactory(
      name: 'IVault',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: 'IVaultPriceFeed',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVaultPriceFeed__factory>;
    getContractFactory(
      name: 'IVaultUtils',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVaultUtils__factory>;
    getContractFactory(
      name: 'OrderBook',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrderBook__factory>;
    getContractFactory(
      name: 'PositionManager',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PositionManager__factory>;
    getContractFactory(
      name: 'PositionRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PositionRouter__factory>;
    getContractFactory(
      name: 'Router',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Router__factory>;
    getContractFactory(
      name: 'Vault',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vault__factory>;
    getContractFactory(
      name: 'VaultErrorController',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultErrorController__factory>;
    getContractFactory(
      name: 'VaultPriceFeed',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultPriceFeed__factory>;
    getContractFactory(
      name: 'VaultUtils',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultUtils__factory>;
    getContractFactory(
      name: 'GMT',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GMT__factory>;
    getContractFactory(
      name: 'IGMT',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGMT__factory>;
    getContractFactory(
      name: 'Treasury',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Treasury__factory>;
    getContractFactory(
      name: 'EsGMX',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EsGMX__factory>;
    getContractFactory(
      name: 'GLP',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GLP__factory>;
    getContractFactory(
      name: 'GMX',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GMX__factory>;
    getContractFactory(
      name: 'GmxFloor',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GmxFloor__factory>;
    getContractFactory(
      name: 'GmxIou',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GmxIou__factory>;
    getContractFactory(
      name: 'GmxMigrator',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GmxMigrator__factory>;
    getContractFactory(
      name: 'IAmmRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAmmRouter__factory>;
    getContractFactory(
      name: 'IGmxIou',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxIou__factory>;
    getContractFactory(
      name: 'IGmxMigrator',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxMigrator__factory>;
    getContractFactory(
      name: 'MigrationHandler',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MigrationHandler__factory>;
    getContractFactory(
      name: 'Ownable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: 'ERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: 'IERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: 'ERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: 'ERC721',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: 'IERC721',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: 'IERC721Enumerable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: 'IERC721Metadata',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: 'IERC721Receiver',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: 'IERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: 'FastPriceEvents',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FastPriceEvents__factory>;
    getContractFactory(
      name: 'FastPriceFeed',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FastPriceFeed__factory>;
    getContractFactory(
      name: 'IChainlinkFlags',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainlinkFlags__factory>;
    getContractFactory(
      name: 'IFastPriceEvents',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFastPriceEvents__factory>;
    getContractFactory(
      name: 'IFastPriceFeed',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFastPriceFeed__factory>;
    getContractFactory(
      name: 'IPriceFeed',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceFeed__factory>;
    getContractFactory(
      name: 'ISecondaryPriceFeed',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISecondaryPriceFeed__factory>;
    getContractFactory(
      name: 'PriceFeed',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceFeed__factory>;
    getContractFactory(
      name: 'BalanceUpdater',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalanceUpdater__factory>;
    getContractFactory(
      name: 'BatchSender',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchSender__factory>;
    getContractFactory(
      name: 'EsGmxBatchSender',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EsGmxBatchSender__factory>;
    getContractFactory(
      name: 'GmxTimelock',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GmxTimelock__factory>;
    getContractFactory(
      name: 'IGmxTimelock',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGmxTimelock__factory>;
    getContractFactory(
      name: 'IHandlerTarget',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHandlerTarget__factory>;
    getContractFactory(
      name: 'ITimelock',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITimelock__factory>;
    getContractFactory(
      name: 'ITimelockTarget',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITimelockTarget__factory>;
    getContractFactory(
      name: 'OrderBookReader',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrderBookReader__factory>;
    getContractFactory(
      name: 'Reader',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Reader__factory>;
    getContractFactory(
      name: 'RewardReader',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardReader__factory>;
    getContractFactory(
      name: 'Timelock',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Timelock__factory>;
    getContractFactory(
      name: 'VaultReader',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultReader__factory>;
    getContractFactory(
      name: 'IReferralStorage',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReferralStorage__factory>;
    getContractFactory(
      name: 'ReferralReader',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReferralReader__factory>;
    getContractFactory(
      name: 'ReferralStorage',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReferralStorage__factory>;
    getContractFactory(
      name: 'BonusDistributor',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BonusDistributor__factory>;
    getContractFactory(
      name: 'GlpBalance',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GlpBalance__factory>;
    getContractFactory(
      name: 'IRewardDistributor',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardDistributor__factory>;
    getContractFactory(
      name: 'IRewardTracker',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardTracker__factory>;
    getContractFactory(
      name: 'IVester',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVester__factory>;
    getContractFactory(
      name: 'RewardDistributor',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardDistributor__factory>;
    getContractFactory(
      name: 'RewardManager',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardManager__factory>;
    getContractFactory(
      name: 'RewardRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardRouter__factory>;
    getContractFactory(
      name: 'RewardRouterV2',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardRouterV2__factory>;
    getContractFactory(
      name: 'RewardTracker',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardTracker__factory>;
    getContractFactory(
      name: 'StakedGlp',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakedGlp__factory>;
    getContractFactory(
      name: 'StakeManager',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeManager__factory>;
    getContractFactory(
      name: 'Vester',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vester__factory>;
    getContractFactory(
      name: 'BaseToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseToken__factory>;
    getContractFactory(
      name: 'Bridge',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bridge__factory>;
    getContractFactory(
      name: 'FaucetToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FaucetToken__factory>;
    getContractFactory(
      name: 'IBaseToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseToken__factory>;
    getContractFactory(
      name: 'IBridge',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: 'IDistributor',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDistributor__factory>;
    getContractFactory(
      name: 'IGLP',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGLP__factory>;
    getContractFactory(
      name: 'IMintable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMintable__factory>;
    getContractFactory(
      name: 'IUSDG',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUSDG__factory>;
    getContractFactory(
      name: 'IWETH',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: 'IYieldToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYieldToken__factory>;
    getContractFactory(
      name: 'IYieldTracker',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYieldTracker__factory>;
    getContractFactory(
      name: 'MintableBaseToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintableBaseToken__factory>;
    getContractFactory(
      name: 'SnapshotToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SnapshotToken__factory>;
    getContractFactory(
      name: 'TimeDistributor',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimeDistributor__factory>;
    getContractFactory(
      name: 'Token',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;
    getContractFactory(
      name: 'USDG',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.USDG__factory>;
    getContractFactory(
      name: 'WETH',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH__factory>;
    getContractFactory(
      name: 'YieldFarm',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YieldFarm__factory>;
    getContractFactory(
      name: 'YieldToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YieldToken__factory>;
    getContractFactory(
      name: 'YieldTracker',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YieldTracker__factory>;
    getContractFactory(
      name: 'IPositionRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPositionRouter__factory>;
    getContractFactory(
      name: 'IRouter',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRouter__factory>;
    getContractFactory(
      name: 'IVault',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: 'IMulticall',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMulticall__factory>;
    getContractFactory(
      name: 'Multicall',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;
    getContractFactory(
      name: 'IUniswapV2Router01',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: 'IERC20Uniswap',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Uniswap__factory>;
    getContractFactory(
      name: 'IUniswapV2Callee',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Callee__factory>;
    getContractFactory(
      name: 'IUniswapV2ERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2ERC20__factory>;
    getContractFactory(
      name: 'IUniswapV2Factory',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: 'IUniswapV2Pair',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: 'IUniswapV2Router01',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: 'IUniswapV2Router02',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: 'IWETH',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: 'UniswapV2ERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2ERC20__factory>;
    getContractFactory(
      name: 'UniswapV2Factory',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Factory__factory>;
    getContractFactory(
      name: 'IMigrator',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMigrator__factory>;
    getContractFactory(
      name: 'UniswapV2Pair',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Pair__factory>;
    getContractFactory(
      name: 'UniswapV2Router02',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Router02__factory>;
    getContractFactory(
      name: 'FeeStrategy',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeStrategy__factory>;
    getContractFactory(
      name: 'FeeStrategy2',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeStrategy2__factory>;
    getContractFactory(
      name: 'FeeStrategy3',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeStrategy3__factory>;
    getContractFactory(
      name: 'IFeeStrategy',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeStrategy__factory>;
    getContractFactory(
      name: 'ContractWhitelist',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContractWhitelist__factory>;
    getContractFactory(
      name: 'Ownable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: 'IAtlanticPool',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAtlanticPool__factory>;
    getContractFactory(
      name: 'IChainlinkV3Aggregator',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainlinkV3Aggregator__factory>;
    getContractFactory(
      name: 'IDopexPositionManager',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDopexPositionManager__factory>;
    getContractFactory(
      name: 'IERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: 'IGMXPositionManager',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGMXPositionManager__factory>;
    getContractFactory(
      name: 'IOptionPricing',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOptionPricing__factory>;
    getContractFactory(
      name: 'IOracle',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracle__factory>;
    getContractFactory(
      name: 'ISSOV',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISSOV__factory>;
    getContractFactory(
      name: 'IStakingRewards',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakingRewards__factory>;
    getContractFactory(
      name: 'IVolatilityOracle',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVolatilityOracle__factory>;
    getContractFactory(
      name: 'BaseAtlanticPool',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseAtlanticPool__factory>;
    getContractFactory(
      name: 'OptionsToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptionsToken__factory>;
    getContractFactory(
      name: 'DopexPositionManager',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DopexPositionManager__factory>;
    getContractFactory(
      name: 'IERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: 'IStrategy',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrategy__factory>;
    getContractFactory(
      name: 'Keeper',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Keeper__factory>;
    getContractFactory(
      name: 'IOptionToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOptionToken__factory>;
    getContractFactory(
      name: 'LongPerpStrategy',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LongPerpStrategy__factory>;
    getContractFactory(
      name: 'MockPriceFeed',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPriceFeed__factory>;
    getContractFactory(
      name: 'MockChainlinkAggregator',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockChainlinkAggregator__factory>;
    getContractFactory(
      name: 'MockOptionPricing',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOptionPricing__factory>;
    getContractFactory(
      name: 'MockPriceOracle',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPriceOracle__factory>;
    getContractFactory(
      name: 'MockVolatilityOracle',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVolatilityOracle__factory>;
    getContractFactory(
      name: 'MonthlyExpiry',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MonthlyExpiry__factory>;
    getContractFactory(
      name: 'MockSSOV',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSSOV__factory>;
    getContractFactory(
      name: 'RewardsDistributionRecipient',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardsDistributionRecipient__factory>;
    getContractFactory(
      name: 'IUniswapV2ERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2ERC20__factory>;
    getContractFactory(
      name: 'StakingRewards',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingRewards__factory>;
    getContractFactory(
      name: 'StakingRewardsFactory',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingRewardsFactory__factory>;
    getContractFactory(
      name: 'IUniswapV2ERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2ERC20__factory>;
    getContractFactory(
      name: 'StakingRewardsV2',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingRewardsV2__factory>;
    getContractFactory(
      name: 'DpxToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DpxToken__factory>;
    getContractFactory(
      name: 'DPXUSD',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DPXUSD__factory>;
    getContractFactory(
      name: 'MockToken',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockToken__factory>;
    getContractFactory(
      name: 'USDT',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.USDT__factory>;
    getContractFactory(
      name: 'WETH9',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;
    getContractFactory(
      name: 'IStructureInterface',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStructureInterface__factory>;

    getContractAt(
      name: 'AccessControlEnumerableUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerableUpgradeable>;
    getContractAt(
      name: 'AccessControlUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: 'IAccessControlEnumerableUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable>;
    getContractAt(
      name: 'IAccessControlUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: 'PausableUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: 'ERC20Upgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: 'ERC20BurnableUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20BurnableUpgradeable>;
    getContractAt(
      name: 'ERC20PausableUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PausableUpgradeable>;
    getContractAt(
      name: 'IERC20MetadataUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: 'IERC20Upgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: 'ERC20PresetMinterPauserUpgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PresetMinterPauserUpgradeable>;
    getContractAt(
      name: 'ERC165Upgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: 'IERC165Upgradeable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: 'AccessControl',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: 'AccessControlEnumerable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerable>;
    getContractAt(
      name: 'IAccessControl',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: 'IAccessControlEnumerable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(
      name: 'Ownable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: 'Pausable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: 'ERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: 'ERC20Burnable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: 'ERC20Pausable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Pausable>;
    getContractAt(
      name: 'IERC20Metadata',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: 'IERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: 'ERC20PresetMinterPauser',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PresetMinterPauser>;
    getContractAt(
      name: 'ERC165',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: 'IERC165',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: 'AtlanticCallsPool',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AtlanticCallsPool>;
    getContractAt(
      name: 'IPriceOracle',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracle>;
    getContractAt(
      name: 'IVolatilityOracle',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVolatilityOracle>;
    getContractAt(
      name: 'AtlanticPoolsFactory',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AtlanticPoolsFactory>;
    getContractAt(
      name: 'AtlanticPutsPool',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AtlanticPutsPool>;
    getContractAt(
      name: 'IPriceOracle',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracle>;
    getContractAt(
      name: 'IVolatilityOracle',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVolatilityOracle>;
    getContractAt(
      name: 'Governable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Governable>;
    getContractAt(
      name: 'IAdmin',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAdmin>;
    getContractAt(
      name: 'TokenManager',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenManager>;
    getContractAt(
      name: 'IPancakeFactory',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeFactory>;
    getContractAt(
      name: 'IPancakePair',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakePair>;
    getContractAt(
      name: 'IPancakeRouter',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPancakeRouter>;
    getContractAt(
      name: 'PancakeFactory',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PancakeFactory>;
    getContractAt(
      name: 'PancakePair',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PancakePair>;
    getContractAt(
      name: 'PancakeRouter',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PancakeRouter>;
    getContractAt(
      name: 'UniFactory',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniFactory>;
    getContractAt(
      name: 'UniNftManager',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniNftManager>;
    getContractAt(
      name: 'UniPool',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniPool>;
    getContractAt(
      name: 'BasePositionManager',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasePositionManager>;
    getContractAt(
      name: 'GlpManager',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GlpManager>;
    getContractAt(
      name: 'IBasePositionManager',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBasePositionManager>;
    getContractAt(
      name: 'IGlpManager',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGlpManager>;
    getContractAt(
      name: 'IOrderBook',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOrderBook>;
    getContractAt(
      name: 'IPositionRouter',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPositionRouter>;
    getContractAt(
      name: 'IRouter',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRouter>;
    getContractAt(
      name: 'IVault',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: 'IVaultPriceFeed',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVaultPriceFeed>;
    getContractAt(
      name: 'IVaultUtils',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVaultUtils>;
    getContractAt(
      name: 'OrderBook',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OrderBook>;
    getContractAt(
      name: 'PositionManager',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PositionManager>;
    getContractAt(
      name: 'PositionRouter',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PositionRouter>;
    getContractAt(
      name: 'Router',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Router>;
    getContractAt(
      name: 'Vault',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Vault>;
    getContractAt(
      name: 'VaultErrorController',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultErrorController>;
    getContractAt(
      name: 'VaultPriceFeed',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultPriceFeed>;
    getContractAt(
      name: 'VaultUtils',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultUtils>;
    getContractAt(
      name: 'GMT',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GMT>;
    getContractAt(
      name: 'IGMT',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGMT>;
    getContractAt(
      name: 'Treasury',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Treasury>;
    getContractAt(
      name: 'EsGMX',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EsGMX>;
    getContractAt(
      name: 'GLP',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GLP>;
    getContractAt(
      name: 'GMX',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GMX>;
    getContractAt(
      name: 'GmxFloor',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GmxFloor>;
    getContractAt(
      name: 'GmxIou',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GmxIou>;
    getContractAt(
      name: 'GmxMigrator',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GmxMigrator>;
    getContractAt(
      name: 'IAmmRouter',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAmmRouter>;
    getContractAt(
      name: 'IGmxIou',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxIou>;
    getContractAt(
      name: 'IGmxMigrator',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxMigrator>;
    getContractAt(
      name: 'MigrationHandler',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MigrationHandler>;
    getContractAt(
      name: 'Ownable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: 'ERC165',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: 'IERC165',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: 'ERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: 'ERC721',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: 'IERC721',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: 'IERC721Enumerable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: 'IERC721Metadata',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: 'IERC721Receiver',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: 'IERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: 'FastPriceEvents',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FastPriceEvents>;
    getContractAt(
      name: 'FastPriceFeed',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FastPriceFeed>;
    getContractAt(
      name: 'IChainlinkFlags',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IChainlinkFlags>;
    getContractAt(
      name: 'IFastPriceEvents',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFastPriceEvents>;
    getContractAt(
      name: 'IFastPriceFeed',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFastPriceFeed>;
    getContractAt(
      name: 'IPriceFeed',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceFeed>;
    getContractAt(
      name: 'ISecondaryPriceFeed',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISecondaryPriceFeed>;
    getContractAt(
      name: 'PriceFeed',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceFeed>;
    getContractAt(
      name: 'BalanceUpdater',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalanceUpdater>;
    getContractAt(
      name: 'BatchSender',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BatchSender>;
    getContractAt(
      name: 'EsGmxBatchSender',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EsGmxBatchSender>;
    getContractAt(
      name: 'GmxTimelock',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GmxTimelock>;
    getContractAt(
      name: 'IGmxTimelock',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGmxTimelock>;
    getContractAt(
      name: 'IHandlerTarget',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHandlerTarget>;
    getContractAt(
      name: 'ITimelock',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITimelock>;
    getContractAt(
      name: 'ITimelockTarget',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITimelockTarget>;
    getContractAt(
      name: 'OrderBookReader',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OrderBookReader>;
    getContractAt(
      name: 'Reader',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Reader>;
    getContractAt(
      name: 'RewardReader',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardReader>;
    getContractAt(
      name: 'Timelock',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Timelock>;
    getContractAt(
      name: 'VaultReader',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VaultReader>;
    getContractAt(
      name: 'IReferralStorage',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IReferralStorage>;
    getContractAt(
      name: 'ReferralReader',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReferralReader>;
    getContractAt(
      name: 'ReferralStorage',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReferralStorage>;
    getContractAt(
      name: 'BonusDistributor',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BonusDistributor>;
    getContractAt(
      name: 'GlpBalance',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GlpBalance>;
    getContractAt(
      name: 'IRewardDistributor',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardDistributor>;
    getContractAt(
      name: 'IRewardTracker',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardTracker>;
    getContractAt(
      name: 'IVester',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVester>;
    getContractAt(
      name: 'RewardDistributor',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardDistributor>;
    getContractAt(
      name: 'RewardManager',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardManager>;
    getContractAt(
      name: 'RewardRouter',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardRouter>;
    getContractAt(
      name: 'RewardRouterV2',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardRouterV2>;
    getContractAt(
      name: 'RewardTracker',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardTracker>;
    getContractAt(
      name: 'StakedGlp',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakedGlp>;
    getContractAt(
      name: 'StakeManager',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeManager>;
    getContractAt(
      name: 'Vester',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Vester>;
    getContractAt(
      name: 'BaseToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseToken>;
    getContractAt(
      name: 'Bridge',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Bridge>;
    getContractAt(
      name: 'FaucetToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FaucetToken>;
    getContractAt(
      name: 'IBaseToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseToken>;
    getContractAt(
      name: 'IBridge',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridge>;
    getContractAt(
      name: 'IDistributor',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDistributor>;
    getContractAt(
      name: 'IGLP',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGLP>;
    getContractAt(
      name: 'IMintable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMintable>;
    getContractAt(
      name: 'IUSDG',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUSDG>;
    getContractAt(
      name: 'IWETH',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: 'IYieldToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYieldToken>;
    getContractAt(
      name: 'IYieldTracker',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYieldTracker>;
    getContractAt(
      name: 'MintableBaseToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintableBaseToken>;
    getContractAt(
      name: 'SnapshotToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SnapshotToken>;
    getContractAt(
      name: 'TimeDistributor',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TimeDistributor>;
    getContractAt(
      name: 'Token',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;
    getContractAt(
      name: 'USDG',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.USDG>;
    getContractAt(
      name: 'WETH',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH>;
    getContractAt(
      name: 'YieldFarm',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YieldFarm>;
    getContractAt(
      name: 'YieldToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YieldToken>;
    getContractAt(
      name: 'YieldTracker',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YieldTracker>;
    getContractAt(
      name: 'IPositionRouter',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPositionRouter>;
    getContractAt(
      name: 'IRouter',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRouter>;
    getContractAt(
      name: 'IVault',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: 'IMulticall',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMulticall>;
    getContractAt(
      name: 'Multicall',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall>;
    getContractAt(
      name: 'IUniswapV2Router01',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: 'IERC20Uniswap',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Uniswap>;
    getContractAt(
      name: 'IUniswapV2Callee',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Callee>;
    getContractAt(
      name: 'IUniswapV2ERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2ERC20>;
    getContractAt(
      name: 'IUniswapV2Factory',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: 'IUniswapV2Pair',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: 'IUniswapV2Router01',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: 'IUniswapV2Router02',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: 'IWETH',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: 'UniswapV2ERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2ERC20>;
    getContractAt(
      name: 'UniswapV2Factory',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Factory>;
    getContractAt(
      name: 'IMigrator',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMigrator>;
    getContractAt(
      name: 'UniswapV2Pair',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Pair>;
    getContractAt(
      name: 'UniswapV2Router02',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Router02>;
    getContractAt(
      name: 'FeeStrategy',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeStrategy>;
    getContractAt(
      name: 'FeeStrategy2',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeStrategy2>;
    getContractAt(
      name: 'FeeStrategy3',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeStrategy3>;
    getContractAt(
      name: 'IFeeStrategy',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeStrategy>;
    getContractAt(
      name: 'ContractWhitelist',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContractWhitelist>;
    getContractAt(
      name: 'Ownable',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: 'IAtlanticPool',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAtlanticPool>;
    getContractAt(
      name: 'IChainlinkV3Aggregator',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IChainlinkV3Aggregator>;
    getContractAt(
      name: 'IDopexPositionManager',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDopexPositionManager>;
    getContractAt(
      name: 'IERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: 'IGMXPositionManager',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGMXPositionManager>;
    getContractAt(
      name: 'IOptionPricing',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOptionPricing>;
    getContractAt(
      name: 'IOracle',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracle>;
    getContractAt(
      name: 'ISSOV',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISSOV>;
    getContractAt(
      name: 'IStakingRewards',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakingRewards>;
    getContractAt(
      name: 'IVolatilityOracle',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVolatilityOracle>;
    getContractAt(
      name: 'BaseAtlanticPool',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseAtlanticPool>;
    getContractAt(
      name: 'OptionsToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptionsToken>;
    getContractAt(
      name: 'DopexPositionManager',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DopexPositionManager>;
    getContractAt(
      name: 'IERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: 'IStrategy',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStrategy>;
    getContractAt(
      name: 'Keeper',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Keeper>;
    getContractAt(
      name: 'IOptionToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOptionToken>;
    getContractAt(
      name: 'LongPerpStrategy',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LongPerpStrategy>;
    getContractAt(
      name: 'MockPriceFeed',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPriceFeed>;
    getContractAt(
      name: 'MockChainlinkAggregator',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockChainlinkAggregator>;
    getContractAt(
      name: 'MockOptionPricing',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockOptionPricing>;
    getContractAt(
      name: 'MockPriceOracle',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPriceOracle>;
    getContractAt(
      name: 'MockVolatilityOracle',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockVolatilityOracle>;
    getContractAt(
      name: 'MonthlyExpiry',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MonthlyExpiry>;
    getContractAt(
      name: 'MockSSOV',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockSSOV>;
    getContractAt(
      name: 'RewardsDistributionRecipient',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardsDistributionRecipient>;
    getContractAt(
      name: 'IUniswapV2ERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2ERC20>;
    getContractAt(
      name: 'StakingRewards',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingRewards>;
    getContractAt(
      name: 'StakingRewardsFactory',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingRewardsFactory>;
    getContractAt(
      name: 'IUniswapV2ERC20',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2ERC20>;
    getContractAt(
      name: 'StakingRewardsV2',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingRewardsV2>;
    getContractAt(
      name: 'DpxToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DpxToken>;
    getContractAt(
      name: 'DPXUSD',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DPXUSD>;
    getContractAt(
      name: 'MockToken',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockToken>;
    getContractAt(
      name: 'USDT',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.USDT>;
    getContractAt(
      name: 'WETH9',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9>;
    getContractAt(
      name: 'IStructureInterface',
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStructureInterface>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
