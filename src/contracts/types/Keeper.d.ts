/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface KeeperInterface extends ethers.utils.Interface {
  functions: {
    'clearPositions(address,uint256[])': FunctionFragment;
    'decreasePositions(address,uint256[])': FunctionFragment;
    'increasePositions(address,uint256[])': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'withdraw(address[])': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'clearPositions',
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'decreasePositions',
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'increasePositions',
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [string[]]): string;

  decodeFunctionResult(
    functionFragment: 'clearPositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'decreasePositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'increasePositions',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'FailDecreaseManagedPosition(address,uint256)': EventFragment;
    'FailIncreaseManagedPosition(address,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'SuccessDecreaseManagedPosition(address,uint256)': EventFragment;
    'SuccessIncreaseManagedPosition(address,uint256)': EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: 'FailDecreaseManagedPosition'
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'FailIncreaseManagedPosition'
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'SuccessDecreaseManagedPosition'
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'SuccessIncreaseManagedPosition'
  ): EventFragment;
}

export type FailDecreaseManagedPositionEvent = TypedEvent<
  [string, BigNumber] & { strategy: string; index: BigNumber }
>;

export type FailIncreaseManagedPositionEvent = TypedEvent<
  [string, BigNumber] & { strategy: string; index: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SuccessDecreaseManagedPositionEvent = TypedEvent<
  [string, BigNumber] & { strategy: string; index: BigNumber }
>;

export type SuccessIncreaseManagedPositionEvent = TypedEvent<
  [string, BigNumber] & { strategy: string; index: BigNumber }
>;

export class Keeper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KeeperInterface;

  functions: {
    clearPositions(
      strategyAddress: string,
      indexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreasePositions(
      strategyAddress: string,
      indexes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increasePositions(
      strategyAddress: string,
      indexes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      tokens: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  clearPositions(
    strategyAddress: string,
    indexes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreasePositions(
    strategyAddress: string,
    indexes: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increasePositions(
    strategyAddress: string,
    indexes: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    tokens: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    clearPositions(
      strategyAddress: string,
      indexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    decreasePositions(
      strategyAddress: string,
      indexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { success: BigNumber; fails: BigNumber }
    >;

    increasePositions(
      strategyAddress: string,
      indexes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { success: BigNumber; fails: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(tokens: string[], overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'FailDecreaseManagedPosition(address,uint256)'(
      strategy?: null,
      index?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { strategy: string; index: BigNumber }
    >;

    FailDecreaseManagedPosition(
      strategy?: null,
      index?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { strategy: string; index: BigNumber }
    >;

    'FailIncreaseManagedPosition(address,uint256)'(
      strategy?: null,
      index?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { strategy: string; index: BigNumber }
    >;

    FailIncreaseManagedPosition(
      strategy?: null,
      index?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { strategy: string; index: BigNumber }
    >;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    'SuccessDecreaseManagedPosition(address,uint256)'(
      strategy?: null,
      index?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { strategy: string; index: BigNumber }
    >;

    SuccessDecreaseManagedPosition(
      strategy?: null,
      index?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { strategy: string; index: BigNumber }
    >;

    'SuccessIncreaseManagedPosition(address,uint256)'(
      strategy?: null,
      index?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { strategy: string; index: BigNumber }
    >;

    SuccessIncreaseManagedPosition(
      strategy?: null,
      index?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { strategy: string; index: BigNumber }
    >;
  };

  estimateGas: {
    clearPositions(
      strategyAddress: string,
      indexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreasePositions(
      strategyAddress: string,
      indexes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increasePositions(
      strategyAddress: string,
      indexes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      tokens: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    clearPositions(
      strategyAddress: string,
      indexes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreasePositions(
      strategyAddress: string,
      indexes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increasePositions(
      strategyAddress: string,
      indexes: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      tokens: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
