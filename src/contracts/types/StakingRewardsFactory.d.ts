/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface StakingRewardsFactoryInterface extends ethers.utils.Interface {
  functions: {
    'addToContractWhitelist(address,uint256)': FunctionFragment;
    'deploy(address,uint256,uint256,uint256,uint256,uint256,uint256)': FunctionFragment;
    'notifyRewardAmount(uint256)': FunctionFragment;
    'notifyRewardAmounts()': FunctionFragment;
    'owner()': FunctionFragment;
    'removeFromContractWhitelist(address,uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'rewardsTokenDPX()': FunctionFragment;
    'rewardsTokenRDPX()': FunctionFragment;
    'stakingID(uint256)': FunctionFragment;
    'stakingRewardsGenesis()': FunctionFragment;
    'stakingRewardsInfoByStakingToken(uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'withdrawRewardToken(uint256,uint256)': FunctionFragment;
    'withdrawRewardTokensFromContract(uint256,uint256,uint256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'addToContractWhitelist',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'deploy',
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: 'notifyRewardAmount',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'notifyRewardAmounts',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'removeFromContractWhitelist',
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'rewardsTokenDPX',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'rewardsTokenRDPX',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'stakingID',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'stakingRewardsGenesis',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'stakingRewardsInfoByStakingToken',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawRewardToken',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawRewardTokensFromContract',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: 'addToContractWhitelist',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'deploy', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'notifyRewardAmount',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'notifyRewardAmounts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'removeFromContractWhitelist',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rewardsTokenDPX',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rewardsTokenRDPX',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'stakingID', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'stakingRewardsGenesis',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'stakingRewardsInfoByStakingToken',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawRewardToken',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawRewardTokensFromContract',
    data: BytesLike
  ): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class StakingRewardsFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingRewardsFactoryInterface;

  functions: {
    addToContractWhitelist(
      _contract: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deploy(
      stakingToken: string,
      rewardAmountDPX: BigNumberish,
      rewardAmountRDPX: BigNumberish,
      rewardsDuration: BigNumberish,
      boostedTimePeriod: BigNumberish,
      boost: BigNumberish,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    notifyRewardAmount(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    notifyRewardAmounts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeFromContractWhitelist(
      _contract: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardsTokenDPX(overrides?: CallOverrides): Promise<[string]>;

    rewardsTokenRDPX(overrides?: CallOverrides): Promise<[string]>;

    stakingID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakingRewardsGenesis(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingRewardsInfoByStakingToken(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        stakingRewards: string;
        rewardAmountDPX: BigNumber;
        rewardAmountRDPX: BigNumber;
        id: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawRewardToken(
      amountDPX: BigNumberish,
      amountRDPX: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawRewardTokensFromContract(
      amountDPX: BigNumberish,
      amountRDPX: BigNumberish,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addToContractWhitelist(
    _contract: string,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deploy(
    stakingToken: string,
    rewardAmountDPX: BigNumberish,
    rewardAmountRDPX: BigNumberish,
    rewardsDuration: BigNumberish,
    boostedTimePeriod: BigNumberish,
    boost: BigNumberish,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  notifyRewardAmount(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  notifyRewardAmounts(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeFromContractWhitelist(
    _contract: string,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardsTokenDPX(overrides?: CallOverrides): Promise<string>;

  rewardsTokenRDPX(overrides?: CallOverrides): Promise<string>;

  stakingID(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  stakingRewardsGenesis(overrides?: CallOverrides): Promise<BigNumber>;

  stakingRewardsInfoByStakingToken(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      stakingRewards: string;
      rewardAmountDPX: BigNumber;
      rewardAmountRDPX: BigNumber;
      id: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawRewardToken(
    amountDPX: BigNumberish,
    amountRDPX: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawRewardTokensFromContract(
    amountDPX: BigNumberish,
    amountRDPX: BigNumberish,
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addToContractWhitelist(
      _contract: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deploy(
      stakingToken: string,
      rewardAmountDPX: BigNumberish,
      rewardAmountRDPX: BigNumberish,
      rewardsDuration: BigNumberish,
      boostedTimePeriod: BigNumberish,
      boost: BigNumberish,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    notifyRewardAmount(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    notifyRewardAmounts(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeFromContractWhitelist(
      _contract: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardsTokenDPX(overrides?: CallOverrides): Promise<string>;

    rewardsTokenRDPX(overrides?: CallOverrides): Promise<string>;

    stakingID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingRewardsGenesis(overrides?: CallOverrides): Promise<BigNumber>;

    stakingRewardsInfoByStakingToken(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        stakingRewards: string;
        rewardAmountDPX: BigNumber;
        rewardAmountRDPX: BigNumber;
        id: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawRewardToken(
      amountDPX: BigNumberish,
      amountRDPX: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    withdrawRewardTokensFromContract(
      amountDPX: BigNumberish,
      amountRDPX: BigNumberish,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addToContractWhitelist(
      _contract: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deploy(
      stakingToken: string,
      rewardAmountDPX: BigNumberish,
      rewardAmountRDPX: BigNumberish,
      rewardsDuration: BigNumberish,
      boostedTimePeriod: BigNumberish,
      boost: BigNumberish,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    notifyRewardAmount(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    notifyRewardAmounts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromContractWhitelist(
      _contract: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardsTokenDPX(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsTokenRDPX(overrides?: CallOverrides): Promise<BigNumber>;

    stakingID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingRewardsGenesis(overrides?: CallOverrides): Promise<BigNumber>;

    stakingRewardsInfoByStakingToken(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawRewardToken(
      amountDPX: BigNumberish,
      amountRDPX: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawRewardTokensFromContract(
      amountDPX: BigNumberish,
      amountRDPX: BigNumberish,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToContractWhitelist(
      _contract: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deploy(
      stakingToken: string,
      rewardAmountDPX: BigNumberish,
      rewardAmountRDPX: BigNumberish,
      rewardsDuration: BigNumberish,
      boostedTimePeriod: BigNumberish,
      boost: BigNumberish,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    notifyRewardAmounts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromContractWhitelist(
      _contract: string,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardsTokenDPX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsTokenRDPX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingID(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingRewardsGenesis(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingRewardsInfoByStakingToken(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRewardToken(
      amountDPX: BigNumberish,
      amountRDPX: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRewardTokensFromContract(
      amountDPX: BigNumberish,
      amountRDPX: BigNumberish,
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
