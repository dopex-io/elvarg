/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface Curve2PoolSsovPutInterface extends utils.Interface {
  contractName: 'Curve2PoolSsovPut';
  functions: {
    'addToContractWhitelist(address)': FunctionFragment;
    'addresses(bytes32)': FunctionFragment;
    'baseToken()': FunctionFragment;
    'bootstrap()': FunctionFragment;
    'calculatePnl(uint256,uint256,uint256)': FunctionFragment;
    'calculatePremium(uint256,uint256)': FunctionFragment;
    'calculatePurchaseFees(uint256,uint256,uint256)': FunctionFragment;
    'calculateSettlementFees(uint256,uint256,uint256)': FunctionFragment;
    'crvToDistribute(uint256)': FunctionFragment;
    'currentEpoch()': FunctionFragment;
    'deposit(uint256,uint256,address)': FunctionFragment;
    'depositMultiple(uint256[],uint256[],address)': FunctionFragment;
    'emergencyWithdraw(address[],bool)': FunctionFragment;
    'epochBalanceAfterUnstaking(uint256)': FunctionFragment;
    'epochStartTimes(uint256)': FunctionFragment;
    'epochStrikeTokens(uint256,uint256)': FunctionFragment;
    'epochStrikes(uint256,uint256)': FunctionFragment;
    'expireDelayTolerance()': FunctionFragment;
    'expireEpoch()': FunctionFragment;
    'finalQuoteTokenBalancePerStrike(uint256,uint256)': FunctionFragment;
    'getAddress(bytes32)': FunctionFragment;
    'getEpochStrikeTokens(uint256)': FunctionFragment;
    'getEpochStrikes(uint256)': FunctionFragment;
    'getEpochTimes(uint256)': FunctionFragment;
    'getLpPrice()': FunctionFragment;
    'getMonthlyExpiryFromTimestamp(uint256)': FunctionFragment;
    'getTotalEpochPutsPurchased(uint256)': FunctionFragment;
    'getTotalEpochStrikeDeposits(uint256)': FunctionFragment;
    'getUsdPrice()': FunctionFragment;
    'getUserEpochDeposits(uint256,address)': FunctionFragment;
    'getUserEpochPremium(uint256,address)': FunctionFragment;
    'getUserEpochPutsPurchased(uint256,address)': FunctionFragment;
    'getVolatility(uint256)': FunctionFragment;
    'isContract(address)': FunctionFragment;
    'isEpochExpired(uint256)': FunctionFragment;
    'isVaultReady(uint256)': FunctionFragment;
    'optionsTokenImplementation()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'purchase(uint256,uint256,address)': FunctionFragment;
    'quoteToken()': FunctionFragment;
    'removeFromContractWhitelist(address)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setAddresses(bytes32[],address[])': FunctionFragment;
    'setStrikes(uint256[])': FunctionFragment;
    'settle(uint256,uint256,uint256)': FunctionFragment;
    'settlementPrices(uint256)': FunctionFragment;
    'totalEpochDeposits(uint256)': FunctionFragment;
    'totalEpochPremium(uint256)': FunctionFragment;
    'totalEpochPutsPurchased(uint256,uint256)': FunctionFragment;
    'totalEpochStrikeDeposits(uint256,uint256)': FunctionFragment;
    'totalEpochStrikePremium(uint256,uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'updateExpireDelayTolerance(uint256)': FunctionFragment;
    'userEpochDeposits(uint256,bytes32)': FunctionFragment;
    'userEpochPremium(uint256,bytes32)': FunctionFragment;
    'userEpochPutsPurchased(uint256,bytes32)': FunctionFragment;
    'whitelistedContracts(address)': FunctionFragment;
    'withdraw(uint256,uint256)': FunctionFragment;
    'withdrawSpecificCoin(uint256,uint256,uint256,int256)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'addToContractWhitelist',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'addresses',
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: 'baseToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'bootstrap', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'calculatePnl',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'calculatePremium',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'calculatePurchaseFees',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateSettlementFees',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'crvToDistribute',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'currentEpoch',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'depositMultiple',
    values: [BigNumberish[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: 'emergencyWithdraw',
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: 'epochBalanceAfterUnstaking',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'epochStartTimes',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'epochStrikeTokens',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'epochStrikes',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'expireDelayTolerance',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'expireEpoch',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'finalQuoteTokenBalancePerStrike',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAddress',
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'getEpochStrikeTokens',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getEpochStrikes',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getEpochTimes',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getLpPrice',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getMonthlyExpiryFromTimestamp',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getTotalEpochPutsPurchased',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getTotalEpochStrikeDeposits',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'getUsdPrice',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserEpochDeposits',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserEpochPremium',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserEpochPutsPurchased',
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'getVolatility',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'isContract', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'isEpochExpired',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'isVaultReady',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'optionsTokenImplementation',
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'purchase',
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: 'quoteToken',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'removeFromContractWhitelist',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'setAddresses',
    values: [BytesLike[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'setStrikes',
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: 'settle',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'settlementPrices',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'totalEpochDeposits',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'totalEpochPremium',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'totalEpochPutsPurchased',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'totalEpochStrikeDeposits',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'totalEpochStrikePremium',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'updateExpireDelayTolerance',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'userEpochDeposits',
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'userEpochPremium',
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'userEpochPutsPurchased',
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: 'whitelistedContracts',
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawSpecificCoin',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: 'addToContractWhitelist',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'addresses', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'baseToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'bootstrap', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'calculatePnl',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculatePremium',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculatePurchaseFees',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculateSettlementFees',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'crvToDistribute',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'currentEpoch',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'depositMultiple',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'emergencyWithdraw',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'epochBalanceAfterUnstaking',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'epochStartTimes',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'epochStrikeTokens',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'epochStrikes',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'expireDelayTolerance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'expireEpoch',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'finalQuoteTokenBalancePerStrike',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getAddress', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getEpochStrikeTokens',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getEpochStrikes',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getEpochTimes',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getLpPrice', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getMonthlyExpiryFromTimestamp',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTotalEpochPutsPurchased',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTotalEpochStrikeDeposits',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUsdPrice',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserEpochDeposits',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserEpochPremium',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserEpochPutsPurchased',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getVolatility',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'isContract', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isEpochExpired',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isVaultReady',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'optionsTokenImplementation',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'purchase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'quoteToken', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'removeFromContractWhitelist',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAddresses',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'setStrikes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'settle', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'settlementPrices',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalEpochDeposits',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalEpochPremium',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalEpochPutsPurchased',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalEpochStrikeDeposits',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'totalEpochStrikePremium',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'updateExpireDelayTolerance',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userEpochDeposits',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userEpochPremium',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'userEpochPutsPurchased',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'whitelistedContracts',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawSpecificCoin',
    data: BytesLike
  ): Result;

  events: {
    'AddToContractWhitelist(address)': EventFragment;
    'AddressSet(bytes32,address)': EventFragment;
    'Bootstrap(uint256)': EventFragment;
    'Compound(uint256,uint256,uint256,uint256)': EventFragment;
    'Deposit(uint256,uint256,uint256,address,address)': EventFragment;
    'EmergencyWithdraw(address)': EventFragment;
    'EpochExpired(address,uint256)': EventFragment;
    'ExpireDelayToleranceUpdate(uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(address)': EventFragment;
    'Purchase(uint256,uint256,uint256,uint256,uint256,address,address)': EventFragment;
    'RemoveFromContractWhitelist(address)': EventFragment;
    'Settle(uint256,uint256,address,uint256,uint256,uint256)': EventFragment;
    'StrikeSet(uint256,uint256)': EventFragment;
    'Unpaused(address)': EventFragment;
    'WindowSizeUpdate(uint256)': EventFragment;
    'Withdraw(uint256,uint256,address,uint256,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AddToContractWhitelist'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AddressSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Bootstrap'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Compound'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EpochExpired'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ExpireDelayToleranceUpdate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Purchase'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'RemoveFromContractWhitelist'
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Settle'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StrikeSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WindowSizeUpdate'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export type AddToContractWhitelistEvent = TypedEvent<
  [string],
  { _contract: string }
>;

export type AddToContractWhitelistEventFilter =
  TypedEventFilter<AddToContractWhitelistEvent>;

export type AddressSetEvent = TypedEvent<
  [string, string],
  { name: string; destination: string }
>;

export type AddressSetEventFilter = TypedEventFilter<AddressSetEvent>;

export type BootstrapEvent = TypedEvent<[BigNumber], { epoch: BigNumber }>;

export type BootstrapEventFilter = TypedEventFilter<BootstrapEvent>;

export type CompoundEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    epoch: BigNumber;
    rewards: BigNumber;
    oldBalance: BigNumber;
    newBalance: BigNumber;
  }
>;

export type CompoundEventFilter = TypedEventFilter<CompoundEvent>;

export type DepositEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, string],
  {
    epoch: BigNumber;
    strike: BigNumber;
    amount: BigNumber;
    user: string;
    sender: string;
  }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type EmergencyWithdrawEvent = TypedEvent<[string], { sender: string }>;

export type EmergencyWithdrawEventFilter =
  TypedEventFilter<EmergencyWithdrawEvent>;

export type EpochExpiredEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; settlementPrice: BigNumber }
>;

export type EpochExpiredEventFilter = TypedEventFilter<EpochExpiredEvent>;

export type ExpireDelayToleranceUpdateEvent = TypedEvent<
  [BigNumber],
  { expireDelayTolerance: BigNumber }
>;

export type ExpireDelayToleranceUpdateEventFilter =
  TypedEventFilter<ExpireDelayToleranceUpdateEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type PurchaseEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string, string],
  {
    epoch: BigNumber;
    strike: BigNumber;
    amount: BigNumber;
    premium: BigNumber;
    fee: BigNumber;
    user: string;
    sender: string;
  }
>;

export type PurchaseEventFilter = TypedEventFilter<PurchaseEvent>;

export type RemoveFromContractWhitelistEvent = TypedEvent<
  [string],
  { _contract: string }
>;

export type RemoveFromContractWhitelistEventFilter =
  TypedEventFilter<RemoveFromContractWhitelistEvent>;

export type SettleEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber],
  {
    epoch: BigNumber;
    strike: BigNumber;
    user: string;
    amount: BigNumber;
    pnl: BigNumber;
    fee: BigNumber;
  }
>;

export type SettleEventFilter = TypedEventFilter<SettleEvent>;

export type StrikeSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  { epoch: BigNumber; strike: BigNumber }
>;

export type StrikeSetEventFilter = TypedEventFilter<StrikeSetEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type WindowSizeUpdateEvent = TypedEvent<
  [BigNumber],
  { windowSizeInHours: BigNumber }
>;

export type WindowSizeUpdateEventFilter =
  TypedEventFilter<WindowSizeUpdateEvent>;

export type WithdrawEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber],
  {
    epoch: BigNumber;
    strike: BigNumber;
    user: string;
    userDeposits: BigNumber;
    quoteTokenWithdrawn: BigNumber;
    crvRewards: BigNumber;
  }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Curve2PoolSsovPut extends BaseContract {
  contractName: 'Curve2PoolSsovPut';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Curve2PoolSsovPutInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addresses(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    bootstrap(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculatePnl(
      price: BigNumberish,
      strike: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculatePremium(
      _strike: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { premium: BigNumber }>;

    calculatePurchaseFees(
      price: BigNumberish,
      strike: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSettlementFees(
      settlementPrice: BigNumberish,
      pnl: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    crvToDistribute(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      strikeIndex: BigNumberish,
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositMultiple(
      strikeIndices: BigNumberish[],
      amounts: BigNumberish[],
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      tokens: string[],
      transferNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    epochBalanceAfterUnstaking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochStartTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochStrikeTokens(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    epochStrikes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    expireDelayTolerance(overrides?: CallOverrides): Promise<[BigNumber]>;

    'expireEpoch()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'expireEpoch(uint256)'(
      settlementPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalQuoteTokenBalancePerStrike(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAddress(name: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getEpochStrikeTokens(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getEpochStrikes(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getEpochTimes(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

    getLpPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMonthlyExpiryFromTimestamp(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalEpochPutsPurchased(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTotalEpochStrikeDeposits(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getUsdPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserEpochDeposits(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getUserEpochPremium(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getUserEpochPutsPurchased(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getVolatility(
      _strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isContract(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isEpochExpired(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isVaultReady(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    optionsTokenImplementation(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    purchase(
      strikeIndex: BigNumberish,
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    quoteToken(overrides?: CallOverrides): Promise<[string]>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAddresses(
      names: BytesLike[],
      destinations: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrikes(
      strikes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settle(
      strikeIndex: BigNumberish,
      amount: BigNumberish,
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settlementPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalEpochDeposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalEpochPremium(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalEpochPutsPurchased(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalEpochStrikeDeposits(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalEpochStrikePremium(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateExpireDelayTolerance(
      _expireDelayTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userEpochDeposits(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userEpochPremium(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userEpochPutsPurchased(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    whitelistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdraw(
      epoch: BigNumberish,
      strikeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawSpecificCoin(
      epoch: BigNumberish,
      strikeIndex: BigNumberish,
      minAmount: BigNumberish,
      coinIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addToContractWhitelist(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addresses(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  bootstrap(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculatePnl(
    price: BigNumberish,
    strike: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePremium(
    _strike: BigNumberish,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePurchaseFees(
    price: BigNumberish,
    strike: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSettlementFees(
    settlementPrice: BigNumberish,
    pnl: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  crvToDistribute(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    strikeIndex: BigNumberish,
    amount: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositMultiple(
    strikeIndices: BigNumberish[],
    amounts: BigNumberish[],
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    tokens: string[],
    transferNative: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  epochBalanceAfterUnstaking(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epochStartTimes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epochStrikeTokens(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  epochStrikes(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  expireDelayTolerance(overrides?: CallOverrides): Promise<BigNumber>;

  'expireEpoch()'(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'expireEpoch(uint256)'(
    settlementPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalQuoteTokenBalancePerStrike(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAddress(name: BytesLike, overrides?: CallOverrides): Promise<string>;

  getEpochStrikeTokens(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getEpochStrikes(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getEpochTimes(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

  getLpPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getMonthlyExpiryFromTimestamp(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalEpochPutsPurchased(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTotalEpochStrikeDeposits(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUsdPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getUserEpochDeposits(
    epoch: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUserEpochPremium(
    epoch: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUserEpochPutsPurchased(
    epoch: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getVolatility(
    _strike: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isContract(addr: string, overrides?: CallOverrides): Promise<boolean>;

  isEpochExpired(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVaultReady(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  optionsTokenImplementation(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  purchase(
    strikeIndex: BigNumberish,
    amount: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  quoteToken(overrides?: CallOverrides): Promise<string>;

  removeFromContractWhitelist(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAddresses(
    names: BytesLike[],
    destinations: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrikes(
    strikes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settle(
    strikeIndex: BigNumberish,
    amount: BigNumberish,
    epoch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settlementPrices(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalEpochDeposits(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalEpochPremium(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalEpochPutsPurchased(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalEpochStrikeDeposits(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalEpochStrikePremium(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateExpireDelayTolerance(
    _expireDelayTolerance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userEpochDeposits(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userEpochPremium(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userEpochPutsPurchased(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  whitelistedContracts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    epoch: BigNumberish,
    strikeIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawSpecificCoin(
    epoch: BigNumberish,
    strikeIndex: BigNumberish,
    minAmount: BigNumberish,
    coinIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addToContractWhitelist(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addresses(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    bootstrap(overrides?: CallOverrides): Promise<boolean>;

    calculatePnl(
      price: BigNumberish,
      strike: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePremium(
      _strike: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePurchaseFees(
      price: BigNumberish,
      strike: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSettlementFees(
      settlementPrice: BigNumberish,
      pnl: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    crvToDistribute(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      strikeIndex: BigNumberish,
      amount: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositMultiple(
      strikeIndices: BigNumberish[],
      amounts: BigNumberish[],
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    emergencyWithdraw(
      tokens: string[],
      transferNative: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    epochBalanceAfterUnstaking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStartTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikeTokens(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    epochStrikes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expireDelayTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    'expireEpoch()'(overrides?: CallOverrides): Promise<boolean>;

    'expireEpoch(uint256)'(
      settlementPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    finalQuoteTokenBalancePerStrike(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddress(name: BytesLike, overrides?: CallOverrides): Promise<string>;

    getEpochStrikeTokens(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getEpochStrikes(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getEpochTimes(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { start: BigNumber; end: BigNumber }>;

    getLpPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getMonthlyExpiryFromTimestamp(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalEpochPutsPurchased(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTotalEpochStrikeDeposits(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUsdPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getUserEpochDeposits(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUserEpochPremium(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUserEpochPutsPurchased(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getVolatility(
      _strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isContract(addr: string, overrides?: CallOverrides): Promise<boolean>;

    isEpochExpired(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVaultReady(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    optionsTokenImplementation(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<boolean>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    purchase(
      strikeIndex: BigNumberish,
      amount: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    quoteToken(overrides?: CallOverrides): Promise<string>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAddresses(
      names: BytesLike[],
      destinations: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    setStrikes(
      strikes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    settle(
      strikeIndex: BigNumberish,
      amount: BigNumberish,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settlementPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalEpochDeposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalEpochPremium(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalEpochPutsPurchased(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalEpochStrikeDeposits(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalEpochStrikePremium(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<boolean>;

    updateExpireDelayTolerance(
      _expireDelayTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userEpochDeposits(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userEpochPremium(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userEpochPutsPurchased(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      epoch: BigNumberish,
      strikeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    withdrawSpecificCoin(
      epoch: BigNumberish,
      strikeIndex: BigNumberish,
      minAmount: BigNumberish,
      coinIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  filters: {
    'AddToContractWhitelist(address)'(
      _contract?: string | null
    ): AddToContractWhitelistEventFilter;
    AddToContractWhitelist(
      _contract?: string | null
    ): AddToContractWhitelistEventFilter;

    'AddressSet(bytes32,address)'(
      name?: BytesLike | null,
      destination?: string | null
    ): AddressSetEventFilter;
    AddressSet(
      name?: BytesLike | null,
      destination?: string | null
    ): AddressSetEventFilter;

    'Bootstrap(uint256)'(epoch?: null): BootstrapEventFilter;
    Bootstrap(epoch?: null): BootstrapEventFilter;

    'Compound(uint256,uint256,uint256,uint256)'(
      epoch?: null,
      rewards?: null,
      oldBalance?: null,
      newBalance?: null
    ): CompoundEventFilter;
    Compound(
      epoch?: null,
      rewards?: null,
      oldBalance?: null,
      newBalance?: null
    ): CompoundEventFilter;

    'Deposit(uint256,uint256,uint256,address,address)'(
      epoch?: null,
      strike?: null,
      amount?: null,
      user?: null,
      sender?: null
    ): DepositEventFilter;
    Deposit(
      epoch?: null,
      strike?: null,
      amount?: null,
      user?: null,
      sender?: null
    ): DepositEventFilter;

    'EmergencyWithdraw(address)'(sender?: null): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(sender?: null): EmergencyWithdrawEventFilter;

    'EpochExpired(address,uint256)'(
      sender?: null,
      settlementPrice?: null
    ): EpochExpiredEventFilter;
    EpochExpired(
      sender?: null,
      settlementPrice?: null
    ): EpochExpiredEventFilter;

    'ExpireDelayToleranceUpdate(uint256)'(
      expireDelayTolerance?: null
    ): ExpireDelayToleranceUpdateEventFilter;
    ExpireDelayToleranceUpdate(
      expireDelayTolerance?: null
    ): ExpireDelayToleranceUpdateEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'Purchase(uint256,uint256,uint256,uint256,uint256,address,address)'(
      epoch?: null,
      strike?: null,
      amount?: null,
      premium?: null,
      fee?: null,
      user?: null,
      sender?: null
    ): PurchaseEventFilter;
    Purchase(
      epoch?: null,
      strike?: null,
      amount?: null,
      premium?: null,
      fee?: null,
      user?: null,
      sender?: null
    ): PurchaseEventFilter;

    'RemoveFromContractWhitelist(address)'(
      _contract?: string | null
    ): RemoveFromContractWhitelistEventFilter;
    RemoveFromContractWhitelist(
      _contract?: string | null
    ): RemoveFromContractWhitelistEventFilter;

    'Settle(uint256,uint256,address,uint256,uint256,uint256)'(
      epoch?: null,
      strike?: null,
      user?: null,
      amount?: null,
      pnl?: null,
      fee?: null
    ): SettleEventFilter;
    Settle(
      epoch?: null,
      strike?: null,
      user?: null,
      amount?: null,
      pnl?: null,
      fee?: null
    ): SettleEventFilter;

    'StrikeSet(uint256,uint256)'(
      epoch?: null,
      strike?: null
    ): StrikeSetEventFilter;
    StrikeSet(epoch?: null, strike?: null): StrikeSetEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'WindowSizeUpdate(uint256)'(
      windowSizeInHours?: null
    ): WindowSizeUpdateEventFilter;
    WindowSizeUpdate(windowSizeInHours?: null): WindowSizeUpdateEventFilter;

    'Withdraw(uint256,uint256,address,uint256,uint256,uint256)'(
      epoch?: null,
      strike?: null,
      user?: null,
      userDeposits?: null,
      quoteTokenWithdrawn?: null,
      crvRewards?: null
    ): WithdrawEventFilter;
    Withdraw(
      epoch?: null,
      strike?: null,
      user?: null,
      userDeposits?: null,
      quoteTokenWithdrawn?: null,
      crvRewards?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    addToContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addresses(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    bootstrap(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculatePnl(
      price: BigNumberish,
      strike: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePremium(
      _strike: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePurchaseFees(
      price: BigNumberish,
      strike: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSettlementFees(
      settlementPrice: BigNumberish,
      pnl: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    crvToDistribute(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      strikeIndex: BigNumberish,
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositMultiple(
      strikeIndices: BigNumberish[],
      amounts: BigNumberish[],
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      tokens: string[],
      transferNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    epochBalanceAfterUnstaking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStartTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikeTokens(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochStrikes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expireDelayTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    'expireEpoch()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'expireEpoch(uint256)'(
      settlementPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalQuoteTokenBalancePerStrike(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddress(name: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getEpochStrikeTokens(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochStrikes(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochTimes(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLpPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getMonthlyExpiryFromTimestamp(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalEpochPutsPurchased(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalEpochStrikeDeposits(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsdPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getUserEpochDeposits(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserEpochPremium(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserEpochPutsPurchased(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVolatility(
      _strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isContract(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isEpochExpired(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVaultReady(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optionsTokenImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    purchase(
      strikeIndex: BigNumberish,
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    quoteToken(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAddresses(
      names: BytesLike[],
      destinations: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrikes(
      strikes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settle(
      strikeIndex: BigNumberish,
      amount: BigNumberish,
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settlementPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalEpochDeposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalEpochPremium(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalEpochPutsPurchased(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalEpochStrikeDeposits(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalEpochStrikePremium(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateExpireDelayTolerance(
      _expireDelayTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userEpochDeposits(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userEpochPremium(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userEpochPutsPurchased(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      epoch: BigNumberish,
      strikeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawSpecificCoin(
      epoch: BigNumberish,
      strikeIndex: BigNumberish,
      minAmount: BigNumberish,
      coinIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addresses(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bootstrap(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculatePnl(
      price: BigNumberish,
      strike: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePremium(
      _strike: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePurchaseFees(
      price: BigNumberish,
      strike: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSettlementFees(
      settlementPrice: BigNumberish,
      pnl: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    crvToDistribute(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      strikeIndex: BigNumberish,
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositMultiple(
      strikeIndices: BigNumberish[],
      amounts: BigNumberish[],
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      tokens: string[],
      transferNative: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    epochBalanceAfterUnstaking(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochStartTimes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochStrikeTokens(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochStrikes(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expireDelayTolerance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'expireEpoch()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'expireEpoch(uint256)'(
      settlementPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalQuoteTokenBalancePerStrike(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddress(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochStrikeTokens(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochStrikes(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochTimes(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLpPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMonthlyExpiryFromTimestamp(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalEpochPutsPurchased(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalEpochStrikeDeposits(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUsdPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserEpochDeposits(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserEpochPremium(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserEpochPutsPurchased(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVolatility(
      _strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isContract(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEpochExpired(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVaultReady(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionsTokenImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchase(
      strikeIndex: BigNumberish,
      amount: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    quoteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromContractWhitelist(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAddresses(
      names: BytesLike[],
      destinations: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrikes(
      strikes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      strikeIndex: BigNumberish,
      amount: BigNumberish,
      epoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settlementPrices(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalEpochDeposits(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalEpochPremium(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalEpochPutsPurchased(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalEpochStrikeDeposits(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalEpochStrikePremium(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateExpireDelayTolerance(
      _expireDelayTolerance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userEpochDeposits(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userEpochPremium(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userEpochPutsPurchased(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      epoch: BigNumberish,
      strikeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSpecificCoin(
      epoch: BigNumberish,
      strikeIndex: BigNumberish,
      minAmount: BigNumberish,
      coinIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
